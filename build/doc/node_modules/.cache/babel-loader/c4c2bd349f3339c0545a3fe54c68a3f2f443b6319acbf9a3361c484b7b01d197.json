{"ast":null,"code":"export const BeforeAdd = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onBeforeIBlockPropertyEnumerationAdd',\n    function(Event $event) {\n        $parameters = &$event->getParameters();\n        $parameters['FIELDS']['XML_ID'] = 'my_value';\n        \n        return new EventResult(EventResult::SUCCESS, $parameters);\n    }\n);\n`;\nexport const CancelBeforeAdd = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventResult;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onBeforeIBlockPropertyEnumerationAdd',\n    function(Event $event) {        \n        return new EventResult(EventResult::ERROR, $event->getParameters());\n    }\n);\n`;\nexport const AfterAdd = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onAfterIBlockPropertyEnumerationAdd',\n    function(Event $event) {\n        //...\n    }\n);\n`;\nexport const BeforeUpdate = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventResult;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onBeforeIBlockPropertyEnumerationUpdate',\n    function(Event $event) {\n        $parameters = &$event->getParameters();\n        $parameters['FIELDS']['XML_ID'] = \"new_value\";\n        \n        return new EventResult(EventResult::SUCCESS, $parameters);\n    }\n);\n`;\nexport const CancelBeforeUpdate = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventResult;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onBeforeIBlockPropertyEnumerationUpdate',\n    function(Event $event) {        \n        return new EventResult(EventResult::ERROR, $event->getParameters());\n    }\n);\n`;\nexport const AfterUpdate = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventResult;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onAfterIBlockPropertyEnumerationUpdate',\n    function(Event $event) {\n        // ...\n    }\n);\n`;","map":{"version":3,"names":["BeforeAdd","CancelBeforeAdd","AfterAdd","BeforeUpdate","CancelBeforeUpdate","AfterUpdate"],"sources":["/home/sholokhov/docker/exchange/local/php_interface/sholokhov.bitrix-exchange/build/doc/src/data/codes/php/events/iblock/properties/enumiration/index.js"],"sourcesContent":["export const BeforeAdd = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onBeforeIBlockPropertyEnumerationAdd',\n    function(Event $event) {\n        $parameters = &$event->getParameters();\n        $parameters['FIELDS']['XML_ID'] = 'my_value';\n        \n        return new EventResult(EventResult::SUCCESS, $parameters);\n    }\n);\n`;\n\nexport const CancelBeforeAdd = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventResult;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onBeforeIBlockPropertyEnumerationAdd',\n    function(Event $event) {        \n        return new EventResult(EventResult::ERROR, $event->getParameters());\n    }\n);\n`;\n\nexport const AfterAdd = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onAfterIBlockPropertyEnumerationAdd',\n    function(Event $event) {\n        //...\n    }\n);\n`;\n\nexport const BeforeUpdate = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventResult;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onBeforeIBlockPropertyEnumerationUpdate',\n    function(Event $event) {\n        $parameters = &$event->getParameters();\n        $parameters['FIELDS']['XML_ID'] = \"new_value\";\n        \n        return new EventResult(EventResult::SUCCESS, $parameters);\n    }\n);\n`;\n\nexport const CancelBeforeUpdate = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventResult;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onBeforeIBlockPropertyEnumerationUpdate',\n    function(Event $event) {        \n        return new EventResult(EventResult::ERROR, $event->getParameters());\n    }\n);\n`;\n\nexport const AfterUpdate = `\nuse Bitrix\\\\Main\\\\Event;\nuse Bitrix\\\\Main\\\\EventResult;\nuse Bitrix\\\\Main\\\\EventManager;\n\nEventManager::getInstance()->addEventHandler(\n    'sholokhov.exchange',\n    'onAfterIBlockPropertyEnumerationUpdate',\n    function(Event $event) {\n        // ...\n    }\n);\n`;"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}