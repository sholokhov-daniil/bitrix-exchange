{"ast":null,"code":"import { createElementVNode as _createElementVNode, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode, unref as _unref, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport MainContainer from \"@/components/container/MainContainer.vue\";\nimport CodeBlock from \"@/components/block-code/CodeBlock.vue\";\nimport { deactivate } from '@/data/codes/php/started';\nexport default {\n  __name: 'ConfigurationPage',\n  setup(__props) {\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(MainContainer, null, {\n        default: _withCtx(() => _cache[0] || (_cache[0] = [_createElementVNode(\"h1\", null, \"Конфигурирование\", -1)])),\n        _: 1\n      }), _createVNode(MainContainer, null, {\n        header: _withCtx(() => _cache[1] || (_cache[1] = [_createElementVNode(\"h2\", {\n          id: \"vvedenie\"\n        }, \"Введение\", -1)])),\n        default: _withCtx(() => [_cache[2] || (_cache[2] = _createElementVNode(\"p\", null, [_createTextVNode(\" Все основные конфигурации обмена указываются в его конструктор. \"), _createElementVNode(\"br\"), _createTextVNode(\" Конфигурация представляет собой ассоциативный массив. Конфигурация обмена является защищенной на чтение и изменение из вне. После передачи конфигурации в конструктор обмена мы больше не сможем их скорректировать и прочитать. Могут встречаться частные случае, когда пользователю предоставляется возможность переопределить конфигурацию \"), _createElementVNode(\"br\"), _createTextVNode(\" Конфигурация позволяет настроить поведение вашего обмена и указать куда производится обмен. Если указать некорректную конфигурацию, то при инициализации обмена мы можем получить исключение - стоит учесть данный момент. \")], -1))]),\n        _: 1\n      }), _createVNode(MainContainer, null, {\n        header: _withCtx(() => _cache[3] || (_cache[3] = [_createElementVNode(\"h2\", null, \"Стандартная конфигурация\", -1)])),\n        default: _withCtx(() => [_cache[4] || (_cache[4] = _createElementVNode(\"p\", null, [_createTextVNode(\" Все стандартные обмены являются наследниками класса \"), _createElementVNode(\"a\", {\n          href: \"./api/classes/Sholokhov-BitrixExchange-Exchange.html\"\n        }, \"Exchange\"), _createTextVNode(\", который позволяет настроить: \")], -1)), _cache[5] || (_cache[5] = _createElementVNode(\"h3\", null, \"Включение деактивации\", -1)), _cache[6] || (_cache[6] = _createElementVNode(\"p\", null, [_createTextVNode(\" После обмена данных производит деактивацию всех значений, которые не приняли участие. \"), _createElementVNode(\"br\"), _createTextVNode(\" По умолчанию деактивацию отключена. Логика деактивации регламентируется наследником, и она не является обязательной. Если наследник откажется реализовывать данный функционал, то данный флаг не повлияет на результат обмена. \")], -1)), _createVNode(CodeBlock, {\n          code: _unref(deactivate)\n        }, null, 8, [\"code\"])]),\n        _: 1\n      })], 64);\n    };\n  }\n};","map":{"version":3,"names":["MainContainer","CodeBlock","deactivate"],"sources":["/home/sholokhov/docker/exchange/local/php_interface/sholokhov.bitrix-exchange/build/doc/src/pages/started/ConfigurationPage.vue"],"sourcesContent":["<script setup>\nimport MainContainer from \"@/components/container/MainContainer.vue\";\nimport CodeBlock from \"@/components/block-code/CodeBlock.vue\";\nimport {deactivate} from '@/data/codes/php/started';\n</script>\n\n<template>\n  <main-container>\n    <h1>Конфигурирование</h1>\n  </main-container>\n\n  <main-container>\n    <template #header>\n      <h2 id=\"vvedenie\">Введение</h2>\n    </template>\n    <p>\n      Все основные конфигурации обмена указываются в его конструктор.\n\n      <br>\n      Конфигурация представляет собой ассоциативный массив. Конфигурация обмена является защищенной на чтение и изменение из вне.\n      После передачи конфигурации в конструктор обмена мы больше не сможем их скорректировать и прочитать.\n      Могут встречаться частные случае, когда пользователю предоставляется возможность переопределить конфигурацию\n\n      <br>\n      Конфигурация позволяет настроить поведение вашего обмена и указать куда производится обмен.\n      Если указать некорректную конфигурацию, то при инициализации обмена мы можем получить исключение - стоит учесть данный момент.\n    </p>\n  </main-container>\n\n  <main-container>\n    <template #header>\n      <h2>Стандартная конфигурация</h2>\n    </template>\n    <p>\n      Все стандартные обмены являются наследниками класса <a href=\"./api/classes/Sholokhov-BitrixExchange-Exchange.html\">Exchange</a>, который позволяет настроить:\n    </p>\n\n    <h3>Включение деактивации</h3>\n    <p>\n      После обмена данных производит деактивацию всех значений, которые не приняли участие.\n      <br>\n      По умолчанию деактивацию отключена. Логика деактивации регламентируется наследником, и она не является обязательной.\n      Если наследник откажется реализовывать данный функционал, то данный флаг не повлияет на результат обмена.\n    </p>\n\n    <CodeBlock :code=\"deactivate\" />\n  </main-container>\n</template>"],"mappings":";AACA,OAAOA,aAAa,MAAM,0CAA0C;AACpE,OAAOC,SAAS,MAAM,uCAAuC;AAC7D,SAAQC,UAAU,QAAO,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}