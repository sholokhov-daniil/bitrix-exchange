{"ast":null,"code":"import { createElementVNode as _createElementVNode, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, unref as _unref, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport { reactive } from \"vue\";\nimport MainContainer from \"@/components/container/MainContainer.vue\";\nimport CodeBlock from \"@/components/block-code/CodeBlock.vue\";\nimport { deactivate, setResult } from '@/data/codes/php/started';\nexport default {\n  __name: 'ConfigurationPage',\n  setup(__props) {\n    const data = reactive({\n      tableContents: [{\n        title: 'Введение',\n        hash: 'vvedenie'\n      }, {\n        title: 'Стандартная конфигурация',\n        hash: 'standart-config',\n        children: [{\n          title: 'Включение деактивации',\n          hash: 'on-deactivate'\n        }, {\n          title: 'Результат обмена',\n          hash: 'set-result'\n        }]\n      }]\n    });\n    return (_ctx, _cache) => {\n      const _component_router_link = _resolveComponent(\"router-link\");\n      return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(MainContainer, null, {\n        default: _withCtx(() => _cache[0] || (_cache[0] = [_createElementVNode(\"h1\", null, \"Конфигурирование\", -1)])),\n        _: 1\n      }), _createVNode(MainContainer, null, {\n        header: _withCtx(() => _cache[1] || (_cache[1] = [_createElementVNode(\"h2\", {\n          id: \"vvedenie\"\n        }, \"Введение\", -1)])),\n        default: _withCtx(() => [_cache[2] || (_cache[2] = _createElementVNode(\"p\", null, [_createTextVNode(\" Все основные конфигурации обмена указываются в его конструктор. \"), _createElementVNode(\"br\"), _createTextVNode(\" Конфигурация представляет собой ассоциативный массив. Конфигурация обмена является защищенной на чтение и изменение из вне. После передачи конфигурации в конструктор обмена мы больше не сможем их скорректировать и прочитать. Могут встречаться частные случае, когда пользователю предоставляется возможность переопределить конфигурацию \"), _createElementVNode(\"br\"), _createTextVNode(\" Конфигурация позволяет настроить поведение вашего обмена и указать куда производится обмен. Если указать некорректную конфигурацию, то при инициализации обмена мы можем получить исключение - стоит учесть данный момент. \")], -1))]),\n        _: 1\n      }), _createVNode(MainContainer, null, {\n        header: _withCtx(() => _cache[3] || (_cache[3] = [_createElementVNode(\"h2\", {\n          id: \"standart-config\"\n        }, \"Стандартная конфигурация\", -1)])),\n        default: _withCtx(() => [_cache[6] || (_cache[6] = _createElementVNode(\"p\", null, [_createTextVNode(\" Все стандартные обмены являются наследниками класса \"), _createElementVNode(\"a\", {\n          href: \"./api/classes/Sholokhov-BitrixExchange-Exchange.html\",\n          target: \"_blank\"\n        }, \"Exchange\"), _createTextVNode(\", который позволяет настроить: \")], -1)), _cache[7] || (_cache[7] = _createElementVNode(\"ul\", null, [_createElementVNode(\"li\", null, \"Включение деактивации\"), _createElementVNode(\"li\", null, \"Результат обмена\")], -1)), _createElementVNode(\"p\", null, [_cache[5] || (_cache[5] = _createTextVNode(\" Каждый отдельно взятый обмен содержит свои доступные параметры и значения. Все доступные обмены описаны в блоке \")), _createVNode(_component_router_link, {\n          to: {\n            name: 'import'\n          }\n        }, {\n          default: _withCtx(() => _cache[4] || (_cache[4] = [_createTextVNode(\"Импорт\")])),\n          _: 1\n        })])]),\n        _: 1\n      }), _createVNode(MainContainer, null, {\n        default: _withCtx(() => [_cache[8] || (_cache[8] = _createElementVNode(\"h3\", {\n          id: \"on-deactivate\"\n        }, \"Включение деактивации\", -1)), _cache[9] || (_cache[9] = _createElementVNode(\"p\", null, [_createTextVNode(\" После обмена данных производит деактивацию всех значений, которые не приняли участие. \"), _createElementVNode(\"br\"), _createTextVNode(\" По умолчанию деактивацию отключена. Логика деактивации регламентируется наследником, и она не является обязательной. Если наследник откажется реализовывать данный функционал, то данный флаг не повлияет на результат обмена. \")], -1)), _createVNode(CodeBlock, {\n          code: _unref(deactivate)\n        }, null, 8, [\"code\"])]),\n        _: 1\n      }), _createVNode(MainContainer, null, {\n        header: _withCtx(() => _cache[10] || (_cache[10] = [_createElementVNode(\"h2\", {\n          id: \"set-result\"\n        }, \"Результат обмена\", -1)])),\n        default: _withCtx(() => [_cache[11] || (_cache[11] = _createElementVNode(\"p\", null, [_createTextVNode(\" Каждый обмен обязан вернуть объект результата выполнения, который реализует интерфейс \"), _createElementVNode(\"a\", {\n          href: \"./api/classes/Sholokhov-BitrixExchange-Messages-ExchangeResultInterface.html\",\n          target: \"_blank\"\n        }, \"ExchangeResultInterface\"), _createElementVNode(\"br\"), _createTextVNode(\" Результат содержит все ошибки, которые возникли и все идентификаторы значений, которые принимали участие в импорте\\\\экспорте. В угоду оптимизации по умолчанию результат не хранит идентификаторы значений, и для этого нам необходимо сконфигурировать обмен. \"), _createElementVNode(\"br\")], -1)), _createVNode(CodeBlock, {\n          code: _unref(setResult)\n        }, null, 8, [\"code\"]), _cache[12] || (_cache[12] = _createElementVNode(\"p\", null, [_createTextVNode(\" Метод \"), _createElementVNode(\"strong\", null, \"setResultRepository\"), _createTextVNode(\" принимает значение, которое является \"), _createElementVNode(\"a\", {\n          href: \"https://www.php.net/manual/en/language.types.callable.php\",\n          target: \"_blank\"\n        }, \"callable\"), _createTextVNode(\", и вернет новый объект хранилища реализующий интерфейс \"), _createElementVNode(\"a\", {\n          href: \"./api/classes/Sholokhov-BitrixExchange-Repository-Result-ResultRepositoryInterface.html\",\n          target: \"_blank\"\n        }, \"ResultRepositoryInterface\"), _createTextVNode(\". \")], -1))]),\n        _: 1\n      })], 64);\n    };\n  }\n};","map":{"version":3,"names":["reactive","MainContainer","CodeBlock","deactivate","setResult","data","tableContents","title","hash","children"],"sources":["/home/sholokhov/docker/exchange/local/php_interface/sholokhov.bitrix-exchange/build/doc/src/pages/started/ConfigurationPage.vue"],"sourcesContent":["<script setup>\nimport {reactive} from \"vue\";\nimport MainContainer from \"@/components/container/MainContainer.vue\";\nimport CodeBlock from \"@/components/block-code/CodeBlock.vue\";\nimport {deactivate, setResult} from '@/data/codes/php/started';\n\nconst data = reactive({\n  tableContents: [\n    {\n      title: 'Введение',\n      hash: 'vvedenie',\n    },\n    {\n      title: 'Стандартная конфигурация',\n      hash: 'standart-config',\n      children: [\n        {\n          title: 'Включение деактивации',\n          hash: 'on-deactivate'\n        },\n        {\n          title: 'Результат обмена',\n          hash: 'set-result'\n        }\n      ]\n    }\n  ]\n});\n</script>\n\n<template>\n  <main-container>\n    <h1>Конфигурирование</h1>\n  </main-container>\n\n  <main-container>\n    <template #header>\n      <h2 id=\"vvedenie\">Введение</h2>\n    </template>\n    <p>\n      Все основные конфигурации обмена указываются в его конструктор.\n\n      <br>\n      Конфигурация представляет собой ассоциативный массив. Конфигурация обмена является защищенной на чтение и изменение из вне.\n      После передачи конфигурации в конструктор обмена мы больше не сможем их скорректировать и прочитать.\n      Могут встречаться частные случае, когда пользователю предоставляется возможность переопределить конфигурацию\n\n      <br>\n      Конфигурация позволяет настроить поведение вашего обмена и указать куда производится обмен.\n      Если указать некорректную конфигурацию, то при инициализации обмена мы можем получить исключение - стоит учесть данный момент.\n    </p>\n  </main-container>\n\n  <main-container>\n    <template #header>\n      <h2 id=\"standart-config\">Стандартная конфигурация</h2>\n    </template>\n    <p>\n      Все стандартные обмены являются наследниками класса <a href=\"./api/classes/Sholokhov-BitrixExchange-Exchange.html\" target=\"_blank\">Exchange</a>, который позволяет настроить:\n    </p>\n    <ul>\n      <li>Включение деактивации</li>\n      <li>Результат обмена</li>\n    </ul>\n\n    <p>\n      Каждый отдельно взятый обмен содержит свои доступные параметры и значения. Все доступные обмены описаны в блоке <router-link :to=\"{name: 'import'}\">Импорт</router-link>\n    </p>\n  </main-container>\n  <main-container>\n    <h3 id=\"on-deactivate\">Включение деактивации</h3>\n    <p>\n      После обмена данных производит деактивацию всех значений, которые не приняли участие.\n      <br>\n      По умолчанию деактивацию отключена. Логика деактивации регламентируется наследником, и она не является обязательной.\n      Если наследник откажется реализовывать данный функционал, то данный флаг не повлияет на результат обмена.\n    </p>\n\n    <CodeBlock :code=\"deactivate\" />\n  </main-container>\n\n  <main-container>\n    <template #header>\n      <h2 id=\"set-result\">Результат обмена</h2>\n    </template>\n    <p>\n      Каждый обмен обязан вернуть объект результата выполнения, который реализует интерфейс <a href=\"./api/classes/Sholokhov-BitrixExchange-Messages-ExchangeResultInterface.html\" target=\"_blank\">ExchangeResultInterface</a>\n      <br>\n      Результат содержит все ошибки, которые возникли и все идентификаторы значений, которые принимали участие в импорте\\экспорте.\n      В угоду оптимизации по умолчанию результат не хранит идентификаторы значений, и для этого нам необходимо сконфигурировать обмен.\n      <br>\n    </p>\n\n    <code-block :code=\"setResult\" />\n\n    <p>\n      Метод <strong>setResultRepository</strong> принимает значение, которое является <a href=\"https://www.php.net/manual/en/language.types.callable.php\" target=\"_blank\">callable</a>,\n      и вернет новый объект хранилища реализующий интерфейс <a href=\"./api/classes/Sholokhov-BitrixExchange-Repository-Result-ResultRepositoryInterface.html\" target=\"_blank\">ResultRepositoryInterface</a>.\n    </p>\n  </main-container>\n</template>"],"mappings":";AACA,SAAQA,QAAQ,QAAO,KAAK;AAC5B,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,SAAS,MAAM,uCAAuC;AAC7D,SAAQC,UAAU,EAAEC,SAAS,QAAO,0BAA0B;;;;IAE9D,MAAMC,IAAI,GAAGL,QAAQ,CAAC;MACpBM,aAAa,EAAE,CACb;QACEC,KAAK,EAAE,UAAU;QACjBC,IAAI,EAAE;MACR,CAAC,EACD;QACED,KAAK,EAAE,0BAA0B;QACjCC,IAAI,EAAE,iBAAiB;QACvBC,QAAQ,EAAE,CACR;UACEF,KAAK,EAAE,uBAAuB;UAC9BC,IAAI,EAAE;QACR,CAAC,EACD;UACED,KAAK,EAAE,kBAAkB;UACzBC,IAAI,EAAE;QACR;MAEJ;IAEJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}