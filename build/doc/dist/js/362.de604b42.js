"use strict";(self["webpackChunkdocumentation"]=self["webpackChunkdocumentation"]||[]).push([[362],{737:function(n,e,l){l.d(e,{A:function(){return i}});var t=l(6768);const a={class:"alert alert-info mt-2",role:"alert"};function u(n,e){return(0,t.uX)(),(0,t.CE)("div",a,[(0,t.Lk)("b",null,[(0,t.RG)(n.$slots,"header")]),(0,t.RG)(n.$slots,"default")])}var r=l(1241);const d={},s=(0,r.A)(d,[["render",u]]);var i=s},1260:function(n,e,l){l.d(e,{A:function(){return d}});var t=l(6768);const a=["href"];var u={__name:"ApiLink",props:{path:{type:String,required:!0}},setup(n){const e=n,l=(0,t.EW)((()=>"./api/"+e.path));return(n,e)=>((0,t.uX)(),(0,t.CE)("a",{href:l.value,target:"_blank"},[(0,t.RG)(n.$slots,"default")],8,a))}};const r=u;var d=r},2241:function(n,e,l){l.d(e,{A:function(){return i}});var t=l(6768);const a={class:"mb-5"};function u(n,e){return(0,t.uX)(),(0,t.CE)("article",a,[(0,t.Lk)("header",null,[(0,t.RG)(n.$slots,"header")]),(0,t.Lk)("main",null,[(0,t.RG)(n.$slots,"default")])])}var r=l(1241);const d={},s=(0,r.A)(d,[["render",u]]);var i=s},2462:function(n,e,l){l.d(e,{A:function(){return s}});var t=l(6768),a=l(144),u=l(6678),r={__name:"CodeBlock",props:{code:{type:String,required:!0},lang:{type:String,default:()=>"php"}},setup(n){return(e,l)=>((0,t.uX)(),(0,t.Wv)((0,a.R1)(u.Pp),(0,t.v6)({code:n.code,lang:n.lang,highlightjs:"",theme:"stackoverflow-dark"},e.$attrs),null,16,["code","lang"]))}};const d=r;var s=d},8362:function(n,e,l){l.r(e),l.d(e,{default:function(){return F}});var t=l(6768),a=l(144),u=l(2241),r=l(1260);const d="✅",s="❌",i="\nuse Sholokhov\\BitrixExchange\\Fields\\Field;\n\n$source = [\n    [\n        'name' => 'Название элемента',\n        'price' => 15.2\n    ],\n    [\n        'name' => 'Еще какой-то товар',\n        'price' => 17.2,\n    ],\n    [\n        'name' => 'Хороший товар',\n        'price' => 15.2,\n        'image' => 'https://example/upload/image.png'\n    ]\n];\n\n$map = [\n    (new Field)\n        ->setOut('name')\n        ->setIn('NAME')\n        ->setPrimary(),\n    (new Field)\n        ->setOut('image')\n        ->setIn('PREVIEW_PICTURE')\n];\n\n$exchange->setMap($map);\n",o="\nuse Sholokhov\\BitrixExchange\\Fields\\Field;\nuse Sholokhov\\BitrixExchange\\Fields\\FieldInterface;\n\n$data = [\n    [\n        'user' => 'Иванов|34 года',\n    ],\n    [\n        'user' => 'Пупкин|18'\n    ]\n];\n\n$nameField = new Field;\n$nameField->setOut('user');\n$nameField->setIn('USER')\n$nameField->setNormalizer(fn(mixed $value, FieldInterface $field) => stristr($value, '|', true));\n",k="\nuse Sholokhov\\BitrixExchange\\Fields\\Field;\nuse Sholokhov\\BitrixExchange\\Messages\\Type\\DataResult;\n\nuse Bitrix\\Main\\Error;\nuse Bitrix\\Main\\Web\\HttpClient;\n\n\n$field->setPreparation(function(mixed $value, FieldInterface $field) {\n    $result = new DataResult;\n    $url = 'https://myweb.com/upload/' . $value;\n    \n    $options = [\n        'headers' => [\n            'Authorization: OAuth MYToken'\n        ]\n    ];\n    \n    $http = new HttpClient($options);\n    $tmp = CFile::GetTempName('', 'tmp.' . md5(mt_rand())); \n    \n    if ($http->download($url, $tmp)) {\n        $result->setData(\n            CFile::MakeFileArray($tmp)\n        );\n    } else {\n        $result->addError(new Error('Ошибка получения изображения: ' . $url));\n    }\n    \n    return $result;\n});\n",p=`\n$source = [\n    [\n        'name' => 'Название элемента',\n        'images' => [\n            'image' => [\n                [\n                    'sdn' => 'https://web.ru/upload/1.png',\n                    'name' => '1.png',\n                ],\n                [   \n                    'sdn' => 'https://web.ru/upload/2.png',\n                    'name' => '2.png'\n                ]\n            ]\n        ]\n    ],\n    // ...\n];\n\n// ${d} Хорошо \n$field = new Field;\n$field->setOut('images.image');\n$field->setChildren(\n    (new Field)->setOut('sdn')\n);\n\n// ${s} Плохо\n$field = new Field;\n$field->setOut('images.image.sdn');\n`,h="\n$source = [\n    [\n        'name' => 'Название элемента',\n        'images' => [\n            'image' => [\n                [\n                    'sdn' => [\n                        [\n                            'path' => 'https://web.ru/upload/1.png'\n                            'name' => '1.png',\n                        ]\n                    ]\n                ],\n                [   \n                    'sdn' => [\n                        [\n                            'path' => 'https://web.ru/upload/2.png'\n                            'name' => '2.png',\n                        ]\n                    ]\n                ]\n            ]\n        ]\n    ],\n    // ...\n];\n\n$field = new Field;\n$field->setOut('images.image');\n$field->setChildren(\n    (new Field)\n        ->setOut('sdn')\n        ->setChildren(\n            (new Field)\n                ->setOut('path')\n        )\n);\n",c="\n$source = [\n    [\n        'name' => 'Название элемента',\n        'images' => [\n            'image' => [\n                [\n                    'sdn' => 'https://web.ru/upload/1.png',\n                    'name' => '1.png',\n                ],\n                [   \n                    'sdn' => 'https://web.ru/upload/2.png',\n                    'name' => '2.png'\n                ]\n            ]\n        ]\n    ],\n    // ...\n];\n\n$field = new Field;\n// т.к. в image хранится перечисляемый массив, то нам достаточно указать номер ключа\n$field->setOut('images.image.0.sdn');\n";var L=l(2462),m=l(737);const f={class:"table table-dark table-striped"};var g={__name:"BasePage",setup(n){return(n,e)=>{const l=(0,t.g2)("router-link");return(0,t.uX)(),(0,t.CE)(t.FK,null,[(0,t.bF)(u.A,null,{default:(0,t.k6)((()=>[e[9]||(e[9]=(0,t.Lk)("h2",null,"Введение",-1)),(0,t.Lk)("p",null,[e[2]||(e[2]=(0,t.eW)(" Карта обмена является неотъемлемый частью в успешном обмене. Карта позволяет связать данные из ")),(0,t.bF)(l,{to:{name:"source"}},{default:(0,t.k6)((()=>e[0]||(e[0]=[(0,t.eW)("источника")]))),_:1}),e[3]||(e[3]=(0,t.eW)(" со ")),(0,t.bF)(l,{to:{name:"import"}},{default:(0,t.k6)((()=>e[1]||(e[1]=[(0,t.eW)("сущностью")]))),_:1}),e[4]||(e[4]=(0,t.eW)(" в которую вставляются данные источника. "))]),(0,t.Lk)("p",null,[e[6]||(e[6]=(0,t.eW)(" Каждый класс описывающий свойство принимающее участие в обмене, должен реализовывать интерфейс ")),(0,t.bF)(r.A,{path:"classes/Sholokhov-BitrixExchange-Fields-FieldInterface.html"},{default:(0,t.k6)((()=>e[5]||(e[5]=[(0,t.eW)("FieldInterface")]))),_:1}),e[7]||(e[7]=(0,t.Lk)("br",null,null,-1)),e[8]||(e[8]=(0,t.eW)(" Разберем пример, который продемонстрирует легкость настройки. "))]),(0,t.bF)(L.A,{code:(0,a.R1)(i)},null,8,["code"]),e[10]||(e[10]=(0,t.Lk)("p",null,[(0,t.eW)(" Из примера можно заметить, что метод "),(0,t.Lk)("b",null,"setOut"),(0,t.eW)(" отвечает за данные из источника данных, а метод "),(0,t.Lk)("b",null,"setIn"),(0,t.eW)(" за свойства, которые относятся к сущности в которую производим импорт. "),(0,t.Lk)("br"),(0,t.eW)(" Именно данная связь является основополагающей, для организации корректного обмена. Можем заметить, что в карте мы пытаемся получить изображения, но не у всех импортируемых элементов оно есть - тут нет нечего страшного, ведь он просто будет иметь пустое значение, и не вызовет исключение или иного отклонения в работе обмена. "),(0,t.Lk)("br"),(0,t.eW)(" Если вы внимательный читатель, то могли обратить внимание на сеттер "),(0,t.Lk)("b",null,"setPrimary"),(0,t.eW)(" - указывает, что данное поле является ключевым на основе которого будет происходит поиск других элементов, и приниматься решение необходимости добавления или обновления. ")],-1))])),_:1}),(0,t.bF)(u.A,null,{default:(0,t.k6)((()=>[e[25]||(e[25]=(0,t.Lk)("h2",null,"Структура",-1)),(0,t.Lk)("p",null,[e[12]||(e[12]=(0,t.eW)("Класс: ")),(0,t.bF)(r.A,{path:"classes/Sholokhov-BitrixExchange-Fields-Field.html"},{default:(0,t.k6)((()=>e[11]||(e[11]=[(0,t.eW)("Field")]))),_:1})]),e[26]||(e[26]=(0,t.Lk)("p",null," Класс описания имеет стандартный набор методов, позволяющий настроить взаимодействие между источником данных и сущностью в которую производится запись. Все стандартные классы описывающие свойство являются наследниками данного объекта. ",-1)),(0,t.Lk)("table",f,[e[17]||(e[17]=(0,t.Lk)("thead",null,[(0,t.Lk)("tr",null,[(0,t.Lk)("td",null,"Наименование"),(0,t.Lk)("td",null,"Обязательное"),(0,t.Lk)("td",null,"Тип данных"),(0,t.Lk)("td",null,"Описание")])],-1)),e[18]||(e[18]=(0,t.Lk)("tr",null,[(0,t.Lk)("td",null,"setPrimary"),(0,t.Lk)("td",null,[(0,t.Lk)("b",null,"Да")]),(0,t.Lk)("td",null,"boolean"),(0,t.Lk)("td",null,"Выступает в качестве идентификационного поля(связывает элементы сущности и элементы источника данных)")],-1)),e[19]||(e[19]=(0,t.Lk)("tr",null,[(0,t.Lk)("td",null,"setOut"),(0,t.Lk)("td",null,[(0,t.Lk)("b",null,"Да")]),(0,t.Lk)("td",null,"string"),(0,t.Lk)("td",null,'Путь до значения, которое вернул источник. Если путь является вложенным, то каждый уровень разделяется символом "."')],-1)),e[20]||(e[20]=(0,t.Lk)("tr",null,[(0,t.Lk)("td",null,"setIn"),(0,t.Lk)("td",null,[(0,t.Lk)("b",null,"Да")]),(0,t.Lk)("td",null,"string"),(0,t.Lk)("td",null,"В какой ключ будет записываться значение из структуры данных источника")],-1)),e[21]||(e[21]=(0,t.Lk)("tr",null,[(0,t.Lk)("td",null,"setPreparation"),(0,t.Lk)("td",null,"Нет"),(0,t.Lk)("td",null,[(0,t.Lk)("a",{href:"https://www.php.net/manual/ru/language.types.callable.php",target:"_blank"},"callable")]),(0,t.Lk)("td",null,"Пользовательский преобразователь значения текущего свойства")],-1)),(0,t.Lk)("tr",null,[e[14]||(e[14]=(0,t.Lk)("td",null,"setChildren",-1)),e[15]||(e[15]=(0,t.Lk)("td",null,"Нет",-1)),(0,t.Lk)("td",null,[(0,t.bF)(r.A,{path:"classes/Sholokhov-BitrixExchange-Fields-FieldInterface.html"},{default:(0,t.k6)((()=>e[13]||(e[13]=[(0,t.eW)("FieldInterface")]))),_:1})]),e[16]||(e[16]=(0,t.Lk)("td",null,"Указывает путь до вложенного значения. Предназначен, для получения значения внутри итерируемых элементов",-1))]),e[22]||(e[22]=(0,t.Lk)("tr",null,[(0,t.Lk)("td",null,"setNormalizer"),(0,t.Lk)("td",null,"Нет"),(0,t.Lk)("td",null,[(0,t.Lk)("a",{href:"https://www.php.net/manual/ru/language.types.callable.php",target:"_blank"},"callable")]),(0,t.Lk)("td",null,' Указываем произвольный нормализатор значения - используется перед преобразованием значения на основе настроек сущности. Данный метод может подойти, если нам из источника приходят "грязные" данные. Пример: из источника приходит строка "Иванов|34 года", а нам для импорта нужен только "Иванов". Наш нормализатор произведет форматирование значения к нужному формату ')],-1))]),(0,t.bF)(m.A,null,{header:(0,t.k6)((()=>e[23]||(e[23]=[(0,t.eW)(" Внимание! ")]))),default:(0,t.k6)((()=>[e[24]||(e[24]=(0,t.Lk)("p",null,[(0,t.eW)("В карте должно быть только одно свойство, которое выступает идентификационным "),(0,t.Lk)("b",null,"(setPrimary)")],-1))])),_:1})])),_:1}),(0,t.bF)(u.A,null,{default:(0,t.k6)((()=>[e[30]||(e[30]=(0,t.Lk)("h3",null,"Нормализатор значения",-1)),e[31]||(e[31]=(0,t.Lk)("p",null,[(0,t.eW)(' Рассмотрим пример использования пользовательского обработчика значений, в поле "user" хранятся значения формата '),(0,t.Lk)("b",null,"{фамилия}|{возраст}"),(0,t.eW)(". В рамках данной задачи нам необходимо из этой строки получить фамилию. "),(0,t.Lk)("br"),(0,t.eW)(" Наш нормализатор получает 2 входных параметра: ")],-1)),(0,t.Lk)("ul",null,[e[29]||(e[29]=(0,t.Lk)("li",null,"Значение, которое необходимо нормализовать (может иметь любой тип данных)",-1)),(0,t.Lk)("li",null,[e[28]||(e[28]=(0,t.eW)("Свойство, значение которого нормализуем. Оно имеет тип данных ")),(0,t.bF)(r.A,{path:"classes/Sholokhov-BitrixExchange-Fields-FieldInterface.html"},{default:(0,t.k6)((()=>e[27]||(e[27]=[(0,t.eW)("FieldInterface")]))),_:1})])]),(0,t.bF)(L.A,{code:(0,a.R1)(o)},null,8,["code"])])),_:1}),(0,t.bF)(u.A,null,{default:(0,t.k6)((()=>[e[36]||(e[36]=(0,t.Lk)("h3",null,"Преобразователь значения",-1)),(0,t.Lk)("p",null,[e[33]||(e[33]=(0,t.eW)(" Каждое свойство наделено возможностью указания собственного преобразователя данных, если значение необходимо обработать уникальным подходом и игнорировать альтернативные решения. Указав свойству собственный нормализатор, в таком случае все зарегистрированные нормализаторы внутри обмена игнорируются. ")),e[34]||(e[34]=(0,t.Lk)("br",null,null,-1)),e[35]||(e[35]=(0,t.eW)(" Результатом работы нормализатора служит объект реализующий интерфейс ")),(0,t.bF)(r.A,{path:"classes/Sholokhov-BitrixExchange-Messages-DataResultInterface.html"},{default:(0,t.k6)((()=>e[32]||(e[32]=[(0,t.eW)("DataResultInterface")]))),_:1})]),e[37]||(e[37]=(0,t.Lk)("h4",null,"Пример",-1)),e[38]||(e[38]=(0,t.Lk)("p",null,[(0,t.eW)(" Перед нами стоит цель: создать собственный преобразователь значения типа файл. В качестве значения нам передается символьный код, который позволяет получить изображение из внешнего ресурса. "),(0,t.Lk)("br"),(0,t.eW)(" Может показаться, что можно использовать нормализатор данных, но нормализатор предназначен, для форматирования значения. В нашем примере помимо преобразования пути предстоит произвести http запрос и скачать изображение, предварительно сохранив в файловой системе сервера. Согласитесь, довольно много обязанностей, для обычного форматирования. ")],-1)),(0,t.bF)(L.A,{code:(0,a.R1)(k)},null,8,["code"])])),_:1}),(0,t.bF)(u.A,null,{default:(0,t.k6)((()=>[e[39]||(e[39]=(0,t.Lk)("h3",null,"Вложенный путь",-1)),e[40]||(e[40]=(0,t.Lk)("p",null," В некоторых случаях нам может потребоваться получить значения внутри итерируемого объекта. Рассмотрим пример на массиве, где нужно получить путь до изображения ",-1)),(0,t.bF)(L.A,{code:(0,a.R1)(p)},null,8,["code"]),e[41]||(e[41]=(0,t.Lk)("p",null,[(0,t.eW)(" Разберем более подробно пример приведенный ранее. "),(0,t.Lk)("br"),(0,t.eW)(' Для этого нам необходимо понять как происходит парсинг значения. У парсера зарезервирован символ ".", который отвечает за разделение уровней данных. Если в пути используется символ ".", то это означает, что теперь производим поиск ключа внутри данного значения: '),(0,t.Lk)("b",null,"parentKey.childrenKey"),(0,t.eW)(". ")],-1)),e[42]||(e[42]=(0,t.Lk)("p",null,[(0,t.eW)(' Из этого следует, что нам необходимо явно указывать путь до нашего значения, соблюдая все ключи массива. В примере мы дошли до массива изображений, и тут встала задача получения значения ключа "sdn" у каждого изображения. '),(0,t.Lk)("br"),(0,t.eW)(" Метод "),(0,t.Lk)("b",null,"setChildren"),(0,t.eW)(" сообщает парсеру, что нужно зайти в каждый элемент массива и достать из него значение. Вложенные пути могут быть более сложными - допускается возможность указания N вложенность ")],-1)),(0,t.bF)(L.A,{code:(0,a.R1)(h)},null,8,["code"]),e[43]||(e[43]=(0,t.Lk)("p",null,[(0,t.eW)(" Нам может потребоваться возможность получения только определенного значения внутри итерации. "),(0,t.Lk)("br"),(0,t.eW)(" Разберем пример, что перед нами стоит задача: получить путь только до первого изображения ")],-1)),(0,t.bF)(L.A,{code:(0,a.R1)(c)},null,8,["code"])])),_:1})],64)}}};const b=g;var F=b}}]);
//# sourceMappingURL=362.de604b42.js.map