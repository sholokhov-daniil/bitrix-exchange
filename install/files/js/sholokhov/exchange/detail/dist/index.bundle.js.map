{"version":3,"file":"index.bundle.js","sources":["../src/config/target.js","../src/components/target.ts","../src/config/general.js","../src/components/general.ts","../src/components/detail.ts"],"sourcesContent":["export default {\n    fields: [\n    ]\n};","import Config from '../config/target.js';\nimport {Factory, RenderType} from 'sholokhov.exchange.ui';\n\n/**\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class Target {\n    /**\n     * Контейнер UI\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _node: Element|null = null;\n\n    /**\n     * Контейнер хранения пользовательских полей\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _customFieldNode: Element|null = null;\n\n    /**\n     * Конфигурация отрисовки\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _options: object;\n\n    /**\n     * @param {Element|string} node Контейнер в который будет производиться отрисовка\n     * @param {object} options Конфигурация отрисовки\n     */\n    constructor(node: string|Element, options: object = {}) {\n        if (typeof node === 'string') {\n            this._node = document.querySelector(node);\n        } else if (node){\n            this._node = node;\n        }\n\n        if (!this._node) {\n            throw 'Invalid target settings node';\n        }\n\n        this._options = options;\n    }\n\n    /**\n     * Отрисовка контейнера UI настроек\n     *\n     * @return void\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    view(): void {\n        this._node.innerHTML = '';\n        this._appendType();\n        this._appendFields(this._node, Config.fields);\n        this._appendCustomFields();\n    }\n\n    /**\n     * Загрузка пользовательских полей\n     *\n     * @param target\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _loadFields(target) {\n        BX.ajax.runAction(\n            'sholokhov:exchange.EntityController.getFields',\n            {\n                data: {\n                    code: target\n                }\n            }\n        )\n            .then(response => {\n                this._customFieldNode.innerHTML = '';\n                if (Array.isArray(response.data)) {\n                    this._appendFields(this._customFieldNode, response.data);\n                }\n            })\n            .catch(response => console.error(response))\n    }\n\n    /**\n     * Добавление списка доступных обменов\n     *\n     * @private\n     * @return void\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _appendType(): void {\n        let view;\n        let options = {\n            title: 'SHOLOKHOV_EXCHANGE_SETTINGS_ENTITY_UI_TARGET_TITLE_FIELD_TYPE',\n            attributes: {\n                name: 'target[type]',\n            },\n            events: {\n                onchange: (event) => this._loadFields(event.target.value),\n            }\n        };\n\n        if (this._options.id) {\n            view = RenderType.Input;\n            options.attributes.type = 'hidden';\n\n        } else {\n            view = RenderType.Select;\n            options.api = {\n                action: 'sholokhov:exchange.EntityController.getByType',\n                data: {\n                    code: 'target'\n                },\n                callback: function(response) {\n                    if (!Array.isArray(response.data)) {\n                        return [];\n                    }\n\n                    response.data = response.data.map(field => ({\n                        value: field.CODE,\n                        name: field.NAME,\n                    }));\n\n                    return response;\n                }\n            };\n        }\n\n        this._node.append(Factory.create(view, options).getContainer());\n    }\n\n    /**\n     * Добавление контейнера с пользовательскими полями\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _appendCustomFields(): void {\n        this._customFieldNode = document.createElement('div');\n        this._node.append(this._customFieldNode);\n    }\n\n    /**\n     * Отрисовка полей в контейнер\n     *\n     * @param node\n     * @param iterator\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _appendFields(node: Element, iterator: Array<object>): void {\n        iterator.forEach(field => {\n            const element = Factory.create(field.view, field.options);\n            if (element) {\n                node.append(element.getContainer());\n            }\n        })\n    }\n}","import {RenderType} from 'sholokhov.exchange.ui'\n\nexport default {\n    fields: [\n        {\n            view: RenderType.Checkbox,\n            options: {\n                title: 'SHOLOKHOV_EXCHANGE_SETTINGS_ENTITY_UI_TARGET_TITLE_FIELD_ACTIVE',\n                attributes: {\n                    name: 'target[active]'\n                },\n            }\n        },\n        {\n            view: RenderType.Input,\n            options: {\n                title: 'SHOLOKHOV_EXCHANGE_SETTINGS_ENTITY_UI_TARGET_TITLE_FIELD_HASH',\n                attributes: {\n                    name: 'target[hash]'\n                },\n            }\n        },\n    ]\n}","import Config from '../config/general.js';\nimport {Factory} from 'sholokhov.exchange.ui';\n\nexport class General {\n    /**\n     * Контейнер UI\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _node: Element|null = null;\n\n    /**\n     * Конфигурация отрисовки\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _options: object;\n\n    /**\n     * @param node\n     * @param options\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    constructor(node: string|Element, options: object = {}) {\n        if (typeof node === 'string') {\n            this._node = document.querySelector(node);\n        } else if (node){\n            this._node = node;\n        }\n\n        if (!this._node) {\n            throw 'Invalid target settings node';\n        }\n\n        this._options = options;\n    }\n\n    /**\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    view(): void {\n        this._node.innerHTML = '';\n        this._appendFields(this._node, Config.fields);\n    }\n\n    /**\n     * Отрисовка полей в контейнер\n     *\n     * @param node\n     * @param iterator\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _appendFields(node: Element, iterator: Array<object>): void {\n        iterator.forEach(field => {\n            const element = Factory.create(field.view, field.options);\n            if (element) {\n                node.append(element.getContainer());\n            }\n        })\n    }\n}","import {Options} from \"../../@types/detail.d.ts\";\nimport {Target} from \"./target.ts\";\nimport {General} from \"./general.ts\";\n\n/**\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class Detail {\n    /**\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _options: Options;\n\n    /**\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _data: object;\n\n    /**\n     * @param data\n     * @param options\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    constructor(data: object = {}, options: Options = {}) {\n        this._options = options;\n        this._data = data;\n    }\n\n    /**\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    view(): void {\n        if (this._options?.container?.general) {\n            (new General(this._options.container.general, this._data)).view();\n        }\n\n        if (this._options?.container?.target) {\n            (new Target(this._options.container.target, this._data)).view();\n        }\n    }\n}"],"names":["fields","Target","node","options","_node","document","querySelector","_options","innerHTML","_appendType","_appendFields","Config","_appendCustomFields","target","BX","ajax","runAction","data","code","then","response","_customFieldNode","Array","isArray","console","error","view","title","attributes","name","events","onchange","event","_loadFields","value","id","RenderType","Input","type","Select","api","action","callback","map","field","CODE","NAME","append","Factory","create","getContainer","createElement","iterator","forEach","element","Checkbox","General","Detail","_data","container","general"],"mappings":"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"}