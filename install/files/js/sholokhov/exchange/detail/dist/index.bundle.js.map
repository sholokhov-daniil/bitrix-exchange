{"version":3,"file":"index.bundle.js","sources":["../src/config/target.js","../src/utils/helper.ts","../src/components/target.ts","../src/config/general.js","../src/components/general.ts","../src/config/source.js","../src/components/source.ts","../src/components/detail.ts","../src/render/hash.ts","../src/index.js"],"sourcesContent":["export default {\n    fields: [\n    ]\n};","export function normalizeTypeResponse(response: object): object {\n    if (!Array.isArray(response.data)) {\n        return [];\n    }\n\n    response.data = response.data.map(field => ({\n        value: field.CODE,\n        name: field.NAME,\n    }));\n\n    return response;\n}","import Config from '../config/target.js';\nimport {Factory, RenderType} from 'sholokhov.exchange.ui';\nimport {normalizeTypeResponse} from \"../utils/helper.ts\";\n\n/**\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class Target {\n    /**\n     * Контейнер UI\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _node: Element|null = null;\n\n    /**\n     * Контейнер хранения пользовательских полей\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _customFieldNode: Element|null = null;\n\n    /**\n     * Конфигурация отрисовки\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _options: object;\n\n    /**\n     * @param {Element|string} node Контейнер в который будет производиться отрисовка\n     * @param {object} options Конфигурация отрисовки\n     */\n    constructor(node: string|Element, options: object = {}) {\n        if (typeof node === 'string') {\n            this._node = document.querySelector(node);\n        } else if (node){\n            this._node = node;\n        }\n\n        if (!this._node) {\n            throw 'Invalid target settings node';\n        }\n\n        this._options = options;\n    }\n\n    /**\n     * Отрисовка контейнера UI настроек\n     *\n     * @return void\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    view(): void {\n        this._node.innerHTML = '';\n        this._appendType();\n        this._appendFields(this._node, Config.fields);\n        this._appendCustomFields();\n    }\n\n    /**\n     * Загрузка пользовательских полей\n     *\n     * @param target\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _loadFields(target): void {\n        BX.ajax.runAction(\n            'sholokhov:exchange.EntityController.getFields',\n            {\n                data: {\n                    code: target\n                }\n            }\n        )\n            .then(response => {\n                this._customFieldNode.innerHTML = '';\n                if (Array.isArray(response.data)) {\n                    this._appendFields(this._customFieldNode, response.data);\n                }\n            })\n            .catch(response => console.error(response))\n    }\n\n    /**\n     * Добавление списка доступных обменов\n     *\n     * @private\n     * @return void\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _appendType(): void {\n        let view;\n        let options = {\n            title: 'SHOLOKHOV_EXCHANGE_SETTINGS_ENTITY_UI_TARGET_TITLE_FIELD_TYPE',\n            attributes: {\n                name: 'target[type]',\n            },\n            events: {\n                onchange: (event) => this._loadFields(event.target.value),\n            }\n        };\n\n        if (this._options.id) {\n            view = RenderType.Input;\n            options.attributes.type = 'hidden';\n\n        } else {\n            view = RenderType.Select;\n            options.api = {\n                action: 'sholokhov:exchange.EntityController.getByType',\n                data: {\n                    code: 'target'\n                },\n                callback: normalizeTypeResponse\n            };\n        }\n\n        this._node.append(Factory.create(view, options).getContainer());\n    }\n\n    /**\n     * Добавление контейнера с пользовательскими полями\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _appendCustomFields(): void {\n        this._customFieldNode = document.createElement('div');\n        this._node.append(this._customFieldNode);\n    }\n\n    /**\n     * Отрисовка полей в контейнер\n     *\n     * @param node\n     * @param iterator\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _appendFields(node: Element, iterator: Array<object>): void {\n        iterator.forEach(field => {\n            const element = Factory.create(field.view, field.options);\n            if (element) {\n                node.append(element.getContainer());\n            }\n        })\n    }\n}","import {RenderType} from 'sholokhov.exchange.ui'\n\nexport default {\n    fields: [\n        {\n            view: RenderType.Checkbox,\n            options: {\n                title: 'SHOLOKHOV_EXCHANGE_SETTINGS_ENTITY_UI_GENERAL_TITLE_FIELD_ACTIVE',\n                attributes: {\n                    name: 'target[active]'\n                },\n            }\n        },\n        {\n            view: 'hash',\n            options: {\n                title: 'SHOLOKHOV_EXCHANGE_SETTINGS_ENTITY_UI_GENERAL_TITLE_FIELD_HASH',\n                attributes: {\n                    name: 'target[hash]'\n                },\n            }\n        },\n    ]\n}","import Config from '../config/general.js';\nimport {Factory} from 'sholokhov.exchange.ui';\n\nexport class General {\n    /**\n     * Контейнер UI\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _node: Element|null = null;\n\n    /**\n     * Конфигурация отрисовки\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _options: object;\n\n    /**\n     * @param node\n     * @param options\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    constructor(node: string|Element, options: object = {}) {\n        if (typeof node === 'string') {\n            this._node = document.querySelector(node);\n        } else if (node){\n            this._node = node;\n        }\n\n        if (!this._node) {\n            throw 'Invalid target settings node';\n        }\n\n        this._options = options;\n    }\n\n    /**\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    view(): void {\n        this._node.innerHTML = '';\n        this._appendFields(this._node, Config.fields);\n    }\n\n    /**\n     * Отрисовка полей в контейнер\n     *\n     * @param node\n     * @param iterator\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _appendFields(node: Element, iterator: Array<object>): void {\n        iterator.forEach(field => {\n            const element = Factory.create(field.view, field.options);\n            if (element) {\n                node.append(element.getContainer());\n            }\n        })\n    }\n}","export default {\n    fields: []\n}","import {Factory, RenderType} from 'sholokhov.exchange.ui';\n\nimport Config from '../config/source.js';\nimport {normalizeTypeResponse} from \"../utils/helper.ts\";\n\nexport class Source {\n    /**\n     * Контейнер UI\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _node: Element|null = null;\n\n    /**\n     * Контейнер хранения пользовательских полей\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _customFieldNode: Element|null = null;\n\n    /**\n     * Конфигурация отрисовки\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _options: object;\n\n    /**\n     * @param {Element|string} node Контейнер в который будет производиться отрисовка\n     * @param {object} options Конфигурация отрисовки\n     */\n    constructor(node: string|Element, options: object = {}) {\n        if (typeof node === 'string') {\n            this._node = document.querySelector(node);\n        } else if (node){\n            this._node = node;\n        }\n\n        if (!this._node) {\n            throw 'Invalid target settings node';\n        }\n\n        this._options = options;\n    }\n\n    /**\n     * Отрисовка контейнера UI настроек\n     *\n     * @return void\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    view(): void {\n        this._node.innerHTML = '';\n        this._appendTypeField();\n        this._appendFields(this._node, Config.fields);\n        this._appendCustomFields();\n    }\n\n    /**\n     * Добавление контейнера с пользовательскими полями\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _appendCustomFields(): void {\n        this._customFieldNode = document.createElement('div');\n        this._node.append(this._customFieldNode);\n    }\n\n    /**\n     * Добавление списка доступных источников\n     *\n     * @private\n     * @return void\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _appendTypeField(): void {\n        const options = {\n            title: 'SHOLOKHOV_EXCHANGE_SETTINGS_ENTITY_UI_SOURCE_TITLE_FIELD_TYPE',\n            attributes: {\n                name: 'source[type]'\n            },\n            events: {\n                onchange: (event) => this._loadFields(event.target.value)\n            },\n            api: {\n                action: 'sholokhov:exchange.EntityController.getByType',\n                data: {\n                    code: 'source'\n                },\n                callback: normalizeTypeResponse,\n            }\n        };\n\n        this._node.append(Factory.create(RenderType.Select, options).getContainer());\n    }\n\n    /**\n     * Отрисовка полей в контейнер\n     *\n     * @param node\n     * @param iterator\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _appendFields(node: Element, iterator: Array<object>): void {\n        iterator.forEach(field => {\n            const element = Factory.create(field.view, field.options);\n            if (element) {\n                node.append(element.getContainer());\n            }\n        })\n    }\n\n    /**\n     * Загрузка пользовательских полей\n     *\n     * @param source {string}\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _loadFields(source: string): void {\n        BX.ajax.runAction(\n            'sholokhov:exchange.EntityController.getFields',\n            {\n                data: {\n                    code: source\n                }\n            }\n        )\n            .then(response => {\n                this._customFieldNode.innerHTML = '';\n                if (Array.isArray(response.data)) {\n                    this._appendFields(this._customFieldNode, response.data);\n                }\n            })\n            .catch(response => console.error(response))\n    }\n}","import {Options} from \"../../@types/detail.d.ts\";\nimport {Target} from \"./target.ts\";\nimport {General} from \"./general.ts\";\nimport {Source} from \"./source.ts\";\n\n/**\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class Detail {\n    /**\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _options: Options;\n\n    /**\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _data: object;\n\n    /**\n     * @param data\n     * @param options\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    constructor(data: object = {}, options: Options = {}) {\n        this._options = options;\n        this._data = data;\n    }\n\n    /**\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    view(): void {\n        if (this._options?.container?.general) {\n            (new General(this._options.container.general, this._data)).view();\n        }\n\n        if (this._options?.container?.target) {\n            (new Target(this._options.container.target, this._data)).view();\n        }\n\n        if (this._options?.container?.source) {\n            (new Source(this._options.container.source, this._data)).view();\n        }\n    }\n}","import {Factory, RenderType} from 'sholokhov.exchange.ui';\nimport \"./hash.css\";\n\nexport class Hash {\n    _container: HTMLElement;\n    _options: object;\n\n    constructor(options: object) {\n        this._options = options;\n    }\n\n    getContainer(): HTMLElement {\n       return this._container ??= this._create();\n    }\n\n    _create(): HTMLElement {\n        const input = Factory.create(RenderType.Input, this._options);\n\n        const label = document.createElement('span');\n        label.innerText = 'Сгенерировать';\n        label.className = \"hash-text-generator\";\n        label.onclick = () => {\n            // Отправляем ajax запрос\n            BX.ajax.runAction(\n                'sholokhov:exchange.SecureController.generateHash'\n            )\n            input.value = \"OPA\";\n        }\n\n        input.valueCell.style.display = 'flex';\n        input.valueCell.append(label);\n\n        return input.getContainer();\n    }\n}","import {Target} from \"./components/target.ts\";\nimport {Detail} from \"./components/detail.ts\";\nimport {Hash} from \"./render/hash.ts\";\nimport {Registry} from 'sholokhov.exchange.ui';\n\nRegistry.set('hash', Hash);\n\nexport {Target, Detail};"],"names":["fields","normalizeTypeResponse","response","Array","isArray","data","map","field","value","CODE","name","NAME","Target","node","options","_node","document","querySelector","_options","innerHTML","_appendType","_appendFields","Config","_appendCustomFields","target","BX","ajax","runAction","code","then","_customFieldNode","console","error","view","title","attributes","events","onchange","event","_loadFields","id","RenderType","Input","type","Select","api","action","callback","append","Factory","create","getContainer","createElement","iterator","forEach","element","Checkbox","General","Source","_appendTypeField","source","Detail","_data","container","general","Hash","_container","_create","input","label","innerText","className","onclick","valueCell","style","display","Registry","set"],"mappings":"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"}