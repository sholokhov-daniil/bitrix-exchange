{"version":3,"file":"index.bundle.js","sources":["../src/util/container/index.ts","../src/render/input.ts","../src/util/http/curl.ts","../src/util/http/field.ts","../src/render/select.ts","../src/render/iBlockSelect.ts","../src/config/render/index.js","../src/util/builder/RenderRegistry.ts","../src/util/factory/render.ts","../src/index.js"],"sourcesContent":["/**\n * Хранилище произвольных данных\n *\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class Registry {\n    /**\n     * Данные хранилища\n     *\n     * @type {object}\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #data: object;\n\n    /**\n     *\n     * @param data {object} Данные хранилища\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    constructor(data: object = {}) {\n        this.#data = data;\n    }\n\n    /**\n     * Проверка наличия значения в контейнере\n     *\n     * @return {boolean}\n     * @param id {string|number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    has(id: string|number): boolean {\n        return this.get(id) !== null;\n    }\n\n    /**\n     * Получение значения\n     *\n     * @return {any}\n     * @param id {string|number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get(id: string|number): any|null {\n        return this.#data[id] ?? null;\n    }\n\n    /**\n     * Установить значение\n     *\n     * @param id {string|number}\n     * @param value {any}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set(id: string|number, value: any): void {\n        this.#data[id] = value;\n    }\n\n    /**\n     * Удаление значения по ID\n     *\n     * @param id {string|number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    remove(id: string|number): void {\n        if (this.has(id)) {\n            delete this.#data[id];\n        }\n    }\n\n    /**\n     * Получение доступных ключей\n     *\n     * @return {Array<number|string>}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get ids() {\n        return Object.keys(this.#data);\n    }\n}","import {Render} from \"../interfaces/render.ts\";\n\n/**\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class Input implements Render\n{\n    /**\n     * Конфигурация сборщика\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #options: object;\n\n    /**\n     * @param options {object}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    constructor(options: object = {}) {\n        this.#options = options;\n    }\n\n    /**\n     * Создание объекта input\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    create(): Element {\n        const container = document.createElement('div');\n\n        const title = this.#createTitle();\n        if (title) {\n            container.append(title);\n        }\n\n        container.append(this.#createInput());\n\n        return container;\n    }\n\n    /**\n     * Указание атрибута\n     *\n     * @param key\n     * @param value\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    setAttribute(key: string, value: any): void {\n        const attributes = this.attributes;\n        attributes[key] = value;\n        this.attributes = attributes;\n    }\n\n    /**\n     * Указание наименования элемента\n     *\n     * @param name {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set name(name: string) {\n        this.setAttribute('name', name);\n    }\n\n    /**\n     * Указание значения инпута\n     *\n     * @param value {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set value(value: string) {\n        this.setAttribute('value', value);\n    }\n\n    /**\n     * Указание типа значения\n     *\n     * @param type {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set type(type: string) {\n        this.setAttribute('type', type);\n    }\n\n    /**\n     * Указание атрибутов\n     *\n     * @param attributes\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set attributes(attributes: object) {\n        this.#options.attributes = attributes;\n    }\n\n    /**\n     * Получение доступных атрибутов\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get attributes(): object {\n        return this.#options?.attributes || {};\n    }\n\n    /**\n     * Создание заголовка\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #createTitle(): Element|null {\n        let title = null;\n\n        if (this.#options.title) {\n            title = document.createElement('div');\n            title.innerText  = this.#options.title;\n            title.className = 'title';\n        }\n\n        return title;\n    }\n\n    /**\n     * Создание хранилища данных\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #createInput(): Element {\n        const container = document.createElement('div');\n        container.className = 'value';\n\n        const input = document.createElement('input');\n\n        if (typeof this.#options.events === 'object') {\n            for (let eventName in this.#options.events) {\n                input[eventName] = this.#options.events[eventName];\n            }\n        }\n\n        for(let name in this.attributes) {\n            input.setAttribute(name, this.attributes[name]);\n        }\n\n        container.append(input);\n\n        return container;\n    }\n}","export const curl = (action: string, parameters: object = {}): BX.Promise => {\n    if (!parameters?.method) {\n        parameters.method = 'POST';\n    }\n\n    return BX.ajax.runAction(action, parameters)\n}\n\nexport const createErrorResponse = (data: object = {}, errors: Array<object> = []): {status: string, data: object, errors: Array<object>} => {\n    const response = createResponse();\n    response.status = 'error';\n    response.data = data;\n    response.errors = errors;\n\n    return response;\n}\n\nexport const createResponse = (): {status: string, data: object, errors: Array<object>} => ({\n    status: \"success\",\n    data: {},\n    errors: []\n});\n\nexport const createError = (message: string, code: string|number = null): {message: string, code: string|number|null} => ({\n    message: message,\n    code: code,\n});","import {createResponse, curl} from \"../http/curl.ts\";\n\nexport const query = (field): Promise<object> => {\n    if (!field?.api?.action) {\n        return new Promise((resolve) => {\n            resolve(createResponse())\n        });\n    }\n\n    const parameters = {\n        method: 'POST',\n        data: field.api?.data || {}\n    };\n\n    return new Promise((resolve, reject) => {\n        curl(field.api.action, parameters)\n            .then(response => resolve(response))\n            .catch(response => reject(response));\n    });\n}","import {Render} from \"../interfaces/render.ts\";\nimport {query} from \"../util/http/field.ts\";\n\nexport class Select implements Render {\n    /**\n     * Конфигурация сборщика\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #options: object;\n\n    /**\n     * @param options {object}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    constructor(options: object = {}) {\n        this.#options = options;\n    }\n\n    /**\n     * Создание объекта select\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    create(): Element {\n        const container = document.createElement('div');\n\n        const title = this.#createTitle();\n        if (title) {\n            container.append(title);\n        }\n\n        container.append(this.#createValue());\n\n        return container;\n    }\n\n    /**\n     * Указание атрибута\n     *\n     * @param key\n     * @param value\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    setAttribute(key: string, value: any): void {\n        const attributes = this.attributes;\n        attributes[key] = value;\n        this.attributes = attributes;\n    }\n\n    /**\n     * Указание наименования элемента\n     *\n     * @param name {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set name(name: string) {\n        this.setAttribute('name', name);\n    }\n\n    /**\n     * Указание значения инпута\n     *\n     * @param value {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set value(value: string) {\n        this.setAttribute('value', value);\n    }\n\n    /**\n     * Указание атрибутов\n     *\n     * @param attributes\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set attributes(attributes: object) {\n        this.#options.attributes = attributes;\n    }\n\n    /**\n     * Получение доступных атрибутов\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get attributes(): object {\n        return this.#options?.attributes || {};\n    }\n\n    /**\n     * Создание заголовка\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #createTitle(): Element|null {\n        let title = null;\n\n        if (this.#options.title) {\n            title = document.createElement('div');\n            title.innerText  = this.#options.title;\n            title.className = 'title';\n        }\n\n        return title;\n    }\n\n    /**\n     * Создание контейнера списка значений\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #createValue(): Element {\n        const container = document.createElement('div');\n        container.className = 'value';\n\n        const select = document.createElement('select');\n        select.add(new Option('-- Выберите значение --', '', true));\n\n        if (typeof this.#options.events === 'object') {\n            for (let eventName in this.#options.events) {\n                select[eventName] = this.#options.events[eventName];\n            }\n        }\n\n        for(let name in this.attributes) {\n            select.setAttribute(name, this.attributes[name]);\n        }\n\n        query(this.#options)\n            .then(response => {\n                if (this.#options.api?.callback) {\n                    response = this.#options.api.callback(response);\n                }\n\n                let enums = [];\n\n                if (Array.isArray(response.data)) {\n                    enums = response.data;\n                } else if (Array.isArray(this.#options?.enums)) {\n                    enums = this.#options.enums;\n                }\n\n                enums.forEach(item => {\n                    const option = new Option(item.name, item.value, false, this.#options?.value === item.value);\n                    select.add(option);\n                })\n            })\n            .catch(response => {\n                console.error(response);\n                alert(`Ошибка получения значений списка \"${this.#options.title}\"`);\n            })\n\n        return select;\n    }\n}","import {Render} from \"../interfaces/render.ts\";\nimport {Factory, RenderType} from 'sholokhov.exchange.ui';\n\n/**\n * Генератор списка выбора инфоблока\n *\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class IBlockSelect implements Render {\n    /**\n     * Селектор элементов инфоблока\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #iBlockSelect: HTMLSelectElement|null = null;\n\n    /**\n     * Создание контейнера списков\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    create(): Element {\n        const node = document.createElement('div');\n        node.append(\n            Factory.create(\n                RenderType.Select,\n                {\n                    title: 'Тип инфоблока: ',\n                    attributes: {\n                        name: 'target[iblock_type]'\n                    },\n                    api: {\n                        action: 'sholokhov:exchange.IBlockController.getTypes',\n                        data: {},\n                        callback: this.#normalizeTypeResponse\n                    },\n                    events: {\n                        onchange: (event) => this.#selectedType(event)\n                    }\n                }\n            )\n        );\n\n        const iBlockNode = Factory.create(\n            RenderType.Select,\n            {\n                title: 'Инфоблок: ',\n                attributes: {\n                    name: 'target[iblock_id]'\n                }\n            }\n        );\n\n        this.#iBlockSelect = iBlockNode.querySelector('select');\n\n        node.append(iBlockNode);\n\n        return node;\n    }\n\n    /**\n     * Выбран тип ИБ\n     *\n     * @param event\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #selectedType(event): void {\n        for(let index = 0; index < this.#iBlockSelect.options.length; index++) {\n            if (this.#iBlockSelect.options[index].value) {\n                this.#iBlockSelect.options[index].remove();\n            }\n        }\n\n        if (!event.target.value) {\n            return;\n        }\n\n        BX.ajax.runAction(\n            'sholokhov:exchange.IBlockController.getIBlocks',\n            {\n                method: 'POST',\n                data: {\n                    parameters: {\n                        filter: {\n                            IBLOCK_TYPE_ID: event.target.value\n                        }\n                    }\n                }\n            }\n        )\n            .then(response => {\n                if (Array.isArray(response.data)) {\n                    response.data.forEach(item => {\n                        this.#iBlockSelect.add(new Option(item.name, item.id))\n                    })\n                }\n            })\n            .catch(() => alert('Ошибка загрузка получения инфоблоков'))\n    }\n\n    /**\n     * Нормализация ответа API на получение доступных типов ИБ\n     *\n     * @param response\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #normalizeTypeResponse(response): object {\n        if (Array.isArray(response.data)) {\n            response.data = response.data.map(function(iBlock) {\n                return {\n                    value: iBlock.id,\n                    name: iBlock.name\n                };\n            })\n        }\n\n        return response;\n    }\n}","import {Input} from '../../render/input.ts';\nimport {Select} from \"../../render/select.ts\";\nimport {IBlockSelect} from \"../../render/iBlockSelect.ts\";\n\nconst Type = {\n    Input: 'input',\n    Select: 'select',\n    IBlockSelector: 'iblock-selector',\n};\n\nconst Map = {};\n\nMap[Type.Input] = Input;\nMap[Type.Select] = Select;\nMap[Type.IBlockSelector] = IBlockSelect;\n\nexport {Type, Map};","import {Registry} from \"../container/index.ts\";\nimport {Map} from '../../config/render';\n\nexport class RenderRegistry {\n    static create(): Registry {\n        return new Registry(Map);\n    }\n}","import {Registry} from \"../container/index.ts\";\nimport {Render} from \"../../interfaces/render.ts\";\nimport {RenderRegistry} from \"../builder/RenderRegistry.ts\";\n\n/**\n * @since 1.2.0\n * @version 1.2.0\n */\nexport default class {\n    /**\n     * Хранилище сборщиков интерфейса\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #registry: Registry;\n\n    /**\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    constructor() {\n        this.#registry = RenderRegistry.create();\n    }\n\n    /**\n     * Создание DOM элемента\n     *\n     * @param type\n     * @param options\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    create(type, options): Element|null {\n        const builder = this.createBuilder(type, options);\n\n        if (!builder) {\n            return null;\n        }\n\n        return builder.create();\n    }\n\n    /**\n     * Создание механизма отрисовки\n     *\n     * @param type\n     * @param options\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    createBuilder(type, options): Render|null {\n        const entity = this.#registry.get(type);\n\n        if (!entity) {\n            return null;\n        }\n\n        return new entity(options);\n    }\n}","import RenderFactory from \"./util/factory/render.ts\";\nimport {Type as RenderType} from './config/render';\nimport {RenderRegistry} from \"./util/builder/RenderRegistry.ts\";\n\nconst Factory = new RenderFactory;\nconst Registry = RenderRegistry.create();\n\nexport {Factory, Registry, RenderType}\n"],"names":["Registry","data","babelHelpers","_classPrivateFieldInitSpec","writable","value","key","id","this","get","has","Object","keys","Input","options","_classPrivateMethodInitSpec","container","document","createElement","title","append","attributes","set","name","setAttribute","type","_babelHelpers$classPr","innerText","className","input","events","eventName","query","field","api","_field$api","action","Promise","resolve","status","errors","parameters","method","_field$api2","reject","BX","ajax","runAction","curl","then","response","Select","select","add","Option","_babelHelpers$classPr2","callback","enums","Array","isArray","_this","_babelHelpers$classPr3","forEach","item","option","_babelHelpers$classPr4","console","error","alert","IBlockSelect","node","Factory","create","RenderType","onchange","event","iBlockNode","querySelector","index","length","remove","target","filter","IBLOCK_TYPE_ID","map","iBlock","Type","IBlockSelector","Map","RenderRegistry","builder","createBuilder","entity"],"mappings":"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"}