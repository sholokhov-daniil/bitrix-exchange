{"version":3,"file":"index.bundle.js","sources":["../src/util/container/index.ts","../src/render/abstractItem.ts","../src/render/input.ts","../src/util/http/field.ts","../src/util/http/curl.ts","../src/render/select.ts","../src/render/iblockSelect.ts","../src/config/render/index.js","../src/util/builder/RenderRegistry.ts","../src/util/factory/render.ts","../src/index.js"],"sourcesContent":["/**\n * Хранилище произвольных данных\n *\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class Registry {\n    /**\n     * Данные хранилища\n     *\n     * @type {object}\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #data: object;\n\n    /**\n     *\n     * @param data {object} Данные хранилища\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    constructor(data: object = {}) {\n        this.#data = data;\n    }\n\n    /**\n     * Проверка наличия значения в контейнере\n     *\n     * @return {boolean}\n     * @param id {string|number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    has(id: string|number): boolean {\n        return this.get(id) !== null;\n    }\n\n    /**\n     * Получение значения\n     *\n     * @return {any}\n     * @param id {string|number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get(id: string|number): any|null {\n        return this.#data[id] ?? null;\n    }\n\n    /**\n     * Установить значение\n     *\n     * @param id {string|number}\n     * @param value {any}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set(id: string|number, value: any): void {\n        this.#data[id] = value;\n    }\n\n    /**\n     * Удаление значения по ID\n     *\n     * @param id {string|number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    remove(id: string|number): void {\n        if (this.has(id)) {\n            delete this.#data[id];\n        }\n    }\n\n    /**\n     * Получение доступных ключей\n     *\n     * @return {Array<number|string>}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get ids() {\n        return Object.keys(this.#data);\n    }\n}","import {SimpleItem} from \"../../@types/render/Item.d.ts\";\nimport {Options} from \"../../@types/render/options/options.d.ts\";\n\nexport class AbstractItem implements SimpleItem {\n    /**\n     * Контейнер с данными\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _container: HTMLElement;\n\n    /**\n     * Заголовок элемента\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _title: HTMLElement;\n\n    /**\n     * Создание контейнера значения\n     *\n     * @param options\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _createValue(options: Options): HTMLElement {};\n\n    /**\n     * @param options {Options} Конфигурация элемента\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    constructor(options: Options) {\n        this._create(options);\n    }\n\n    /**\n     * DOM элемент заголовка\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    getTitle(): HTMLElement {\n        return this._title;\n    }\n\n    /**\n     * Получение DOM элемента\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    getContainer(): HTMLElement {\n        return this._container;\n    }\n\n    /**\n     * Создание DOM элемента\n     *\n     * @param options\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _create(options: Options): void {\n        this._container = document.createElement('div');\n\n        this._title = this._createTitle(options);\n        this._container.append(this._title );\n\n        const valueContainer = document.createElement('div');\n        valueContainer.className = 'value';\n        valueContainer.append(this._createValue(options));\n\n        this._container.append(valueContainer);\n    }\n\n    /**\n     * Создание заголовка\n     *\n     * @param options {Options}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _createTitle(options: Options): HTMLDivElement {\n        const title = document.createElement('div');\n        title.innerText  = BX.message(options.title);\n        title.className = 'title';\n\n        return title;\n    }\n}","import {AbstractItem} from './abstractItem.ts';\nimport {Options} from \"../../@types/render/options/options.d.ts\";\n\n/**\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class Input extends AbstractItem {\n    /**\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _input: HTMLInputElement;\n\n    /**\n     * Указание атрибута\n     *\n     * @param key\n     * @param value\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    setAttribute(key: string, value: any): void {\n        this._input.setAttribute(key, value);\n    }\n\n    /**\n     * Указание наименования элемента\n     *\n     * @param name {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set name(name: string) {\n        this.setAttribute('name', name);\n    }\n\n    /**\n     * Указание значения инпута\n     *\n     * @param value {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set value(value: string) {\n        this._input.value = value;\n    }\n\n    /**\n     * Получение значения\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get value(): any {\n        return this._input.value;\n    }\n\n    /**\n     * Указание типа значения\n     *\n     * @param type {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set type(type: string) {\n        this._input.type = type;\n    }\n\n    /**\n     * Указание атрибутов\n     *\n     * @param attributes\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set attributes(attributes: object) {\n        for (let name in attributes) {\n            this._input.setAttribute(name, attributes[name]);\n        }\n    }\n\n    /**\n     * Получение доступных атрибутов\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get attributes(): object {\n        const attributes = {};\n        this._input.getAttributeNames().forEach(name => attributes[name] = this._input.getAttribute(name));\n\n        return attributes;\n    }\n\n    /**\n     * Создание хранилища данных\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _createValue(options: Options): HTMLElement {\n        const container = document.createElement('div');\n        container.className = 'value';\n\n        this._input = document.createElement('input');\n\n        if (options.events) {\n            for (let eventName in options.events) {\n                this._input[eventName] = options.events[eventName];\n            }\n        }\n\n        if (options.attributes) {\n            for (let name in options.attributes) {\n                this._input.setAttribute(name, options.attributes[name]);\n            }\n        }\n\n        container.append(this._input);\n\n        return container;\n    }\n}","import {createResponse, curl} from \"../http/curl.ts\";\n\nexport const query = (field): Promise<object> => {\n    if (!field?.api?.action) {\n        return new Promise((resolve) => {\n            resolve(createResponse())\n        });\n    }\n\n    const parameters = {\n        method: 'POST',\n        data: field.api?.data || {}\n    };\n\n    return new Promise((resolve, reject) => {\n        curl(field.api.action, parameters)\n            .then(response => resolve(response))\n            .catch(response => reject(response));\n    });\n}","export const curl = (action: string, parameters: object = {}): BX.Promise => {\n    if (!parameters?.method) {\n        parameters.method = 'POST';\n    }\n\n    return BX.ajax.runAction(action, parameters)\n}\n\nexport const createErrorResponse = (data: object = {}, errors: Array<object> = []): {status: string, data: object, errors: Array<object>} => {\n    const response = createResponse();\n    response.status = 'error';\n    response.data = data;\n    response.errors = errors;\n\n    return response;\n}\n\nexport const createResponse = (): {status: string, data: object, errors: Array<object>} => ({\n    status: \"success\",\n    data: {},\n    errors: []\n});\n\nexport const createError = (message: string, code: string|number = null): {message: string, code: string|number|null} => ({\n    message: message,\n    code: code,\n});","import {query} from \"../util/http/field.ts\";\nimport {AbstractItem} from \"./abstractItem.ts\";\nimport {Enumeration, SelectOptions} from \"../../@types/render/options/select.d.ts\";\nimport {Select as SelectInterface} from '../../@types/render/select.d.ts';\n\nexport class Select extends AbstractItem implements SelectInterface {\n\n    /**\n     * Список значений\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _select: HTMLSelectElement;\n\n    /**\n     * @param option {Option}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    addOption(option: Option): void {\n        this._select.add(option);\n    }\n\n    /**\n     * Удаление значения по индексу\n     *\n     * @param index {number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    removeOption(index: number): void {\n        this._select.options.remove(index);\n    }\n\n    /**\n     * Удаление всех значений списка\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    removeAllOptions(): void {\n        this._select.options.length = 0;\n    }\n\n    /**\n     * Получение коллекции значений списка\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    getOptions(): HTMLOptionsCollection {\n        return this._select.options;\n    }\n\n    /**\n     * @param index {number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    getOption(index: number) {\n        return this._select.options.item(index);\n    }\n\n    /**\n     * Указание атрибута\n     *\n     * @param key\n     * @param value\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    setAttribute(key: string, value: any): void {\n        this._select.setAttribute(key, value);\n    }\n\n    /**\n     * Указание наименования элемента\n     *\n     * @param name {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set name(name: string) {\n        this.setAttribute('name', name);\n    }\n\n    /**\n     * Указание значения инпута\n     *\n     * @param value {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set value(value: string) {\n        this.setAttribute('value', value);\n    }\n\n    /**\n     * Указание атрибутов\n     *\n     * @param attributes\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set attributes(attributes: object) {\n        for (let name in attributes) {\n            this._select.setAttribute(name, attributes[name]);\n        }\n    }\n\n    /**\n     * Получение доступных атрибутов\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get attributes(): object {\n        const attributes = {};\n        this._select.getAttributeNames().forEach(name => attributes[name] = this._select.getAttribute(name));\n        \n        return attributes;\n    }\n    \n    /**\n     * Создание контейнера списка значений\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _createValue(options: SelectOptions): HTMLElement {\n        this._select = document.createElement('select');\n        this._select.add(new Option('-- Выберите значение --', '', true));\n\n        if (typeof options.events === 'object') {\n            for (let eventName in options.events) {\n                this._select[eventName] = options.events[eventName];\n            }\n        }\n\n        for(let name in this.attributes) {\n            this._select.setAttribute(name, this.attributes[name]);\n        }\n\n        query(options)\n            .then(response => {\n                if (options.api?.callback) {\n                    response = options.api.callback(response);\n                }\n\n                let enums = [];\n\n                if (Array.isArray(response.data)) {\n                    enums = response.data;\n                } else if (Array.isArray(options?.enums)) {\n                    enums = options.enums;\n                }\n\n                enums.forEach((item: Enumeration) => {\n                    this.addOption(\n                        new Option(item.name, item.value, false)\n                    )\n                })\n            })\n            .catch(response => {\n                console.error(response);\n                alert(`Ошибка получения значений списка \"${options.title}\"`);\n            })\n\n        return this._select;\n    }\n}","import {Item} from \"../../@types/render/Item.d.ts\";\nimport {Factory, RenderType} from 'sholokhov.exchange.ui';\nimport {Select} from \"../../@types/render/select.d.ts\";\n\n/**\n * Генератор списка выбора инфоблока\n *\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class IBlockSelect implements Item {\n    /**\n     * @private\n     * \n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _container: HTMLElement;\n\n    /**\n     * @private\n     * \n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _type: Select;\n\n    /**\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _iBlock: Select;\n\n    constructor() {\n        this._create();\n    }\n    \n    /**\n     * DOM элемент селекторов\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    getContainer(): HTMLElement {\n        return this._container;\n    }\n\n    /**\n     * Создание контейнера списков\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _create(): void {\n        this._container = document.createElement('div');\n\n        this._type = Factory.create(\n            RenderType.Select,\n            {\n                title: 'SHOLOKHOV_EXCHANGE_SETTINGS_UI_TITLE_RENDER_IBLOCK_SELECT_TYPE',\n                attributes: {\n                    name: 'target[iblock_type]'\n                },\n                api: {\n                    action: 'sholokhov:exchange.IBlockController.getTypes',\n                    data: {},\n                    callback: this._normalizeTypeResponse\n                },\n                events: {\n                    onchange: (event) => this._selectedType(event)\n                }\n            }\n        )\n\n\n        this._container.append(this._type.getContainer());\n\n        this._iBlock = Factory.create(\n            RenderType.Select,\n            {\n                title: 'SHOLOKHOV_EXCHANGE_SETTINGS_UI_TITLE_RENDER_IBLOCK_SELECT_IBLOCK',\n                attributes: {\n                    name: 'target[iblock_id]'\n                }\n            }\n        );\n\n        this._container.append(this._iBlock.getContainer());\n    }\n\n    /**\n     * Выбран тип ИБ\n     *\n     * @param event\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _selectedType(event): void {\n        const iBlockOptions = this._iBlock.getOptions();\n\n        for(let index = 0; index < iBlockOptions.length; index++) {\n            if (iBlockOptions[index].value) {\n                this._iBlock.removeOption(index);\n            }\n        }\n\n        if (!event.target.value) {\n            return;\n        }\n\n        BX.ajax.runAction(\n            'sholokhov:exchange.IBlockController.getIBlocks',\n            {\n                method: 'POST',\n                data: {\n                    parameters: {\n                        filter: {\n                            IBLOCK_TYPE_ID: event.target.value\n                        }\n                    }\n                }\n            }\n        )\n            .then(response => {\n                if (Array.isArray(response.data)) {\n                    response.data.forEach((item) => {\n                        this._iBlock.addOption(new Option(item.name, item.id))\n                    })\n                }\n            })\n            .catch(() => alert('Ошибка загрузка получения инфоблоков'))\n    }\n\n    /**\n     * Нормализация ответа API на получение доступных типов ИБ\n     *\n     * @param response\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _normalizeTypeResponse(response): object {\n        if (Array.isArray(response.data)) {\n            response.data = response.data.map(function(iBlock) {\n                return {\n                    value: iBlock.id,\n                    name: iBlock.name\n                };\n            })\n        }\n\n        return response;\n    }\n}","import {Input} from '../../render/input.ts';\nimport {Select} from \"../../render/select.ts\";\nimport {IBlockSelect} from \"../../render/iblockSelect.ts\";\n\nconst Type = {\n    Input: 'input',\n    Select: 'select',\n    IBlockSelector: 'iblock-selector',\n};\n\nconst Map = {};\n\nMap[Type.Input] = Input;\nMap[Type.Select] = Select;\nMap[Type.IBlockSelector] = IBlockSelect;\n\nexport {Type, Map};","import {Registry} from \"../container/index.ts\";\nimport {Map} from '../../config/render';\n\nexport class RenderRegistry {\n    static create(): Registry {\n        return new Registry(Map);\n    }\n}","import {Registry} from \"../container/index.ts\";\nimport {Item} from \"../../../@types/render/Item.d.ts\";\nimport {RenderRegistry} from \"../builder/RenderRegistry.ts\";\n\n/**\n * @since 1.2.0\n * @version 1.2.0\n */\nexport default class {\n    /**\n     * Хранилище сборщиков интерфейса\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #registry: Registry;\n\n    /**\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    constructor() {\n        this.#registry = RenderRegistry.create();\n    }\n\n    /**\n     * Создание DOM элемента\n     *\n     * @param type\n     * @param options\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    create(type, options): Item|null {\n        const item = this.#registry.get(type);\n\n        if (!item) {\n            return null;\n        }\n\n        return new item(options);\n    }\n}","import RenderFactory from \"./util/factory/render.ts\";\nimport {Type as RenderType} from './config/render';\nimport {RenderRegistry} from \"./util/builder/RenderRegistry.ts\";\n\nconst Factory = new RenderFactory;\nconst Registry = RenderRegistry.create();\n\nexport {Factory, Registry, RenderType}\n"],"names":["Registry","data","babelHelpers","_classPrivateFieldInitSpec","writable","value","key","id","this","get","has","Object","keys","AbstractItem","options","_create","_title","_container","document","createElement","_createTitle","append","valueContainer","className","_createValue","title","innerText","BX","message","Input","_input","setAttribute","container","events","eventName","attributes","name","set","type","getAttributeNames","forEach","_this","getAttribute","query","field","api","_field$api","action","Promise","resolve","status","errors","parameters","method","_field$api2","reject","ajax","runAction","curl","then","response","Select","option","_select","add","index","remove","length","item","Option","_options$api","callback","enums","Array","isArray","addOption","console","error","alert","_this2","IBlockSelect","_type","Factory","create","RenderType","_normalizeTypeResponse","onchange","event","_selectedType","getContainer","_iBlock","iBlockOptions","getOptions","removeOption","target","filter","IBLOCK_TYPE_ID","map","iBlock","Type","IBlockSelector","Map","RenderRegistry"],"mappings":"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"}