{"version":3,"file":"index.bundle.js","sources":["../src/util/container/index.ts","../src/render/abstractItem.ts","../src/render/input.ts","../src/render/checkbox.ts","../src/util/http/field.ts","../src/util/http/curl.ts","../src/render/select.ts","../src/render/entitySelector.ts","../src/render/iblockProperty.ts","../src/render/ufProperty.ts","../src/config/render/index.js","../src/util/builder/RenderRegistry.ts","../src/util/factory/render.ts","../src/index.js"],"sourcesContent":["/**\n * Хранилище произвольных данных\n *\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class Registry {\n    /**\n     * Данные хранилища\n     *\n     * @type {object}\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #data: object;\n\n    /**\n     *\n     * @param data {object} Данные хранилища\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    constructor(data: object = {}) {\n        this.#data = data;\n    }\n\n    /**\n     * Проверка наличия значения в контейнере\n     *\n     * @return {boolean}\n     * @param id {string|number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    has(id: string|number): boolean {\n        return this.get(id) !== null;\n    }\n\n    /**\n     * Получение значения\n     *\n     * @return {any}\n     * @param id {string|number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get(id: string|number): any|null {\n        return this.#data[id] ?? null;\n    }\n\n    /**\n     * Установить значение\n     *\n     * @param id {string|number}\n     * @param value {any}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set(id: string|number, value: any): void {\n        this.#data[id] = value;\n    }\n\n    /**\n     * Удаление значения по ID\n     *\n     * @param id {string|number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    remove(id: string|number): void {\n        if (this.has(id)) {\n            delete this.#data[id];\n        }\n    }\n\n    /**\n     * Получение доступных ключей\n     *\n     * @return {Array<number|string>}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get ids() {\n        return Object.keys(this.#data);\n    }\n}","import {SimpleItem} from \"../../@types/render/Item.d.ts\";\nimport {Options} from \"../../@types/render/options/options.d.ts\";\n\nexport class AbstractItem implements SimpleItem {\n    /**\n     * Контейнер с данными\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _container: HTMLElement;\n\n    /**\n     * Заголовок элемента\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _title: HTMLElement;\n\n    /**\n     * Создание контейнера значения\n     *\n     * @param options\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _createValue(options: Options): HTMLElement {};\n\n    /**\n     * @param options {Options} Конфигурация элемента\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    constructor(options: Options) {\n        this._create(options);\n    }\n\n    /**\n     * DOM элемент заголовка\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    getTitle(): HTMLElement {\n        return this._title;\n    }\n\n    /**\n     * Получение DOM элемента\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    getContainer(): HTMLElement {\n        return this._container;\n    }\n\n    /**\n     * Создание DOM элемента\n     *\n     * @param options\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _create(options: Options): void {\n        this._container = document.createElement('div');\n\n        this._title = this._createTitle(options);\n        this._container.append(this._title);\n\n        const valueContainer = document.createElement('div');\n        valueContainer.className = 'value';\n        valueContainer.append(this._createValue(options));\n\n        this._container.append(valueContainer);\n    }\n\n    /**\n     * Создание заголовка\n     *\n     * @param options {Options}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _createTitle(options: Options): HTMLDivElement {\n        const title = document.createElement('div');\n        title.innerText  = BX.message(options?.title);\n        title.className = 'title';\n\n        return title;\n    }\n}","import {AbstractItem} from './abstractItem.ts';\nimport {Options} from \"../../@types/render/options/options.d.ts\";\n\n/**\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class Input extends AbstractItem {\n    /**\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _input: HTMLInputElement;\n\n    /**\n     * Указание атрибута\n     *\n     * @param key\n     * @param value\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    setAttribute(key: string, value: any): void {\n        this._input.setAttribute(key, value);\n    }\n\n    /**\n     * Указание наименования элемента\n     *\n     * @param name {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set name(name: string) {\n        this.setAttribute('name', name);\n    }\n\n    /**\n     * Указание значения инпута\n     *\n     * @param value {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set value(value: string) {\n        this._input.value = value;\n    }\n\n    /**\n     * Получение значения\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get value(): any {\n        return this._input.value;\n    }\n\n    /**\n     * Указание типа значения\n     *\n     * @param type {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set type(type: string) {\n        this._input.type = type;\n    }\n\n    /**\n     * Указание атрибутов\n     *\n     * @param attributes\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set attributes(attributes: object) {\n        for (let name in attributes) {\n            this._input.setAttribute(name, attributes[name]);\n        }\n    }\n\n    /**\n     * Получение доступных атрибутов\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get attributes(): object {\n        const attributes = {};\n        this._input.getAttributeNames().forEach(name => attributes[name] = this._input.getAttribute(name));\n\n        return attributes;\n    }\n\n    /**\n     * Создание хранилища данных\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _createValue(options: Options): HTMLElement {\n        const container = document.createElement('div');\n        container.className = 'ui-ctl ui-ctl-textbox';\n\n        this._input = document.createElement('input');\n        this._input.className = 'ui-ctl-element';\n\n        if (options.events) {\n            for (let eventName in options.events) {\n                this._input[eventName] = options.events[eventName];\n            }\n        }\n\n        if (options.attributes) {\n            for (let name in options.attributes) {\n                this._input.setAttribute(name, options.attributes[name]);\n            }\n        }\n\n        container.append(this._input);\n\n        return container;\n    }\n}","import {AbstractItem} from './abstractItem.ts';\nimport {Options} from \"../../@types/render/options/options.d.ts\";\n\n/**\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class Checkbox extends AbstractItem {\n    /**\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _input: HTMLInputElement;\n\n    /**\n     * Указание атрибута\n     *\n     * @param key\n     * @param value\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    setAttribute(key: string, value: any): void {\n        this._input.setAttribute(key, value);\n    }\n\n    /**\n     * Указание наименования элемента\n     *\n     * @param name {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set name(name: string) {\n        this.setAttribute('name', name);\n    }\n\n    /**\n     * Указание значения инпута\n     *\n     * @param value {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set value(value: string) {\n        this._input.value = value;\n    }\n\n    /**\n     * Получение значения\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get value(): any {\n        return this._input.value;\n    }\n\n    /**\n     * Указание типа значения\n     *\n     * @param type {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set type(type: string) {\n        this._input.type = type;\n    }\n\n    /**\n     * Указание атрибутов\n     *\n     * @param attributes\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set attributes(attributes: object) {\n        for (let name in attributes) {\n            this._input.setAttribute(name, attributes[name]);\n        }\n    }\n\n    /**\n     * Получение доступных атрибутов\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get attributes(): object {\n        const attributes = {};\n        this._input.getAttributeNames().forEach(name => attributes[name] = this._input.getAttribute(name));\n\n        return attributes;\n    }\n\n    /**\n     * Создание хранилища данных\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _createValue(options: Options): HTMLElement {\n        const container = document.createElement('label');\n        container.className = 'ui-ctl ui-ctl-checkbox';\n\n        this._input = document.createElement('input');\n        // this._input.className = 'ui-ctl-element';\n\n        if (options.events) {\n            for (let eventName in options.events) {\n                this._input[eventName] = options.events[eventName];\n            }\n        }\n\n        if (options.attributes) {\n            for (let name in options.attributes) {\n                this._input.setAttribute(name, options.attributes[name]);\n            }\n        }\n\n        this._input.type = 'checkbox';\n\n        container.append(this._input);\n\n        return container;\n    }\n}","import {createResponse, curl} from \"../http/curl.ts\";\n\nexport const query = (field): Promise<object> => {\n    if (!field?.api?.action) {\n        return new Promise((resolve) => {\n            resolve(createResponse())\n        });\n    }\n\n    const parameters = {\n        method: 'POST',\n        data: field.api?.data || {}\n    };\n\n    return new Promise((resolve, reject) => {\n        curl(field.api.action, parameters)\n            .then(response => resolve(response))\n            .catch(response => reject(response));\n    });\n}","export const curl = (action: string, parameters: object = {}): BX.Promise => {\n    if (!parameters?.method) {\n        parameters.method = 'POST';\n    }\n\n    return BX.ajax.runAction(action, parameters)\n}\n\nexport const createErrorResponse = (data: object = {}, errors: Array<object> = []): {status: string, data: object, errors: Array<object>} => {\n    const response = createResponse();\n    response.status = 'error';\n    response.data = data;\n    response.errors = errors;\n\n    return response;\n}\n\nexport const createResponse = (): {status: string, data: object, errors: Array<object>} => ({\n    status: \"success\",\n    data: {},\n    errors: []\n});\n\nexport const createError = (message: string, code: string|number = null): {message: string, code: string|number|null} => ({\n    message: message,\n    code: code,\n});","import {query} from \"../util/http/field.ts\";\nimport {AbstractItem} from \"./abstractItem.ts\";\nimport {Enumeration, SelectOptions} from \"../../@types/render/options/select.d.ts\";\nimport {Select as SelectInterface} from '../../@types/render/select.d.ts';\n\nexport class Select extends AbstractItem implements SelectInterface {\n\n    /**\n     * Список значений\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _select: HTMLSelectElement;\n\n    /**\n     * @param option {Option}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    addOption(option: Option): void {\n        this._select.add(option);\n    }\n\n    /**\n     * Удаление значения по индексу\n     *\n     * @param index {number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    removeOption(index: number): void {\n        this._select.options.remove(index);\n    }\n\n    /**\n     * Удаление всех значений списка\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    removeAllOptions(): void {\n        this._select.options.length = 0;\n    }\n\n    /**\n     * Получение коллекции значений списка\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    getOptions(): HTMLOptionsCollection {\n        return this._select.options;\n    }\n\n    /**\n     * @param index {number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    getOption(index: number) {\n        return this._select.options.item(index);\n    }\n\n    /**\n     * Указание атрибута\n     *\n     * @param key\n     * @param value\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    setAttribute(key: string, value: any): void {\n        this._select.setAttribute(key, value);\n    }\n\n    /**\n     * Указание наименования элемента\n     *\n     * @param name {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set name(name: string) {\n        this.setAttribute('name', name);\n    }\n\n    /**\n     * Указание значения инпута\n     *\n     * @param value {string}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set value(value: string) {\n        this.setAttribute('value', value);\n    }\n\n    /**\n     * Указание атрибутов\n     *\n     * @param attributes\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    set attributes(attributes: object) {\n        for (let name in attributes) {\n            this._select.setAttribute(name, attributes[name]);\n        }\n    }\n\n    /**\n     * Получение доступных атрибутов\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get attributes(): object {\n        const attributes = {};\n        this._select.getAttributeNames().forEach(name => attributes[name] = this._select.getAttribute(name));\n        \n        return attributes;\n    }\n    \n    /**\n     * Создание контейнера списка значений\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _createValue(options: SelectOptions): HTMLElement {\n        const container = document.createElement('div');\n        container.className = 'ui-ctl ui-ctl-after-icon ui-ctl-dropdown';\n\n        const angle = document.createElement('div');\n        angle.className = 'ui-ctl-after ui-ctl-icon-angle';\n        container.append(angle);\n\n        this._select = document.createElement('select');\n        this._select.className = 'ui-ctl-element';\n        this._select.add(new Option('-- Выберите значение --', '', true));\n\n        if (typeof options.events === 'object') {\n            for (let eventName in options.events) {\n                this._select[eventName] = options.events[eventName];\n            }\n        }\n\n        for(let name in this.attributes) {\n            this._select.setAttribute(name, this.attributes[name]);\n        }\n\n        query(options)\n            .then(response => {\n                if (options.api?.callback) {\n                    response = options.api.callback(response);\n                }\n\n                let enums = [];\n\n                if (Array.isArray(response.data)) {\n                    enums = response.data;\n                } else if (Array.isArray(options?.enums)) {\n                    enums = options.enums;\n                }\n\n                enums.forEach((item: Enumeration) => {\n                    this.addOption(\n                        new Option(item.name, item.value, false)\n                    )\n                })\n            })\n            .catch(response => {\n                console.error(response);\n                alert(`Ошибка получения значений списка \"${options.title}\"`);\n            })\n\n        container.append(this._select);\n\n        return container;\n    }\n}","import {TagSelector} from 'ui.entity-selector';\nimport {AbstractItem} from \"./abstractItem.ts\";\nimport {EntitySelectorOptions} from '../../@types/render/options/entitySelector.d.ts'\n\n/**\n * Генератор списка элементов сущности\n *\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class EntitySelector extends AbstractItem {\n    /**\n     * Объект списка\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _selector: TagSelector;\n\n    constructor(options: EntitySelectorOptions) {\n        super(options);\n    }\n\n    /**\n     * Создание списка сущностей\n     *\n     * @param options {EntitySelectorOptions}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _createValue(options: EntitySelectorOptions): HTMLElement {\n        const container = document.createElement('div');\n\n        if (options?.selector?.addButtonCaption) {\n            options.selector.addButtonCaption = BX.message(options.selector.addButtonCaption) || options.selector.addButtonCaption;\n        }\n\n        this._selector = new TagSelector(options?.selector || {});\n        this.selector.renderTo(container);\n\n        return container;\n    }\n\n    /**\n     * @return {TagSelector}\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    get selector(): TagSelector {\n        return this._selector;\n    }\n}","import {Item} from \"../../@types/render/Item.d.ts\";\nimport {EntitySelector} from \"./entitySelector.ts\";\nimport {TagEvent} from \"../../@types/render/entity-selector/events/tagSelector.d.ts\";\n\n/**\n * Селектор выбора свойств определенного инфоблока\n *\n * @internal\n *\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class IBlockProperty implements Item {\n    /**\n     * Контейнер списков\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _container: HTMLElement;\n\n    /**\n     * Список инфоблоков\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _iBlock: EntitySelector;\n\n    /**\n     * Список свойств\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _property: EntitySelector;\n\n    _options: object;\n\n    constructor(options) {\n        this._options = options;\n    }\n\n    /**\n     * Получение контейнера списков\n     *\n     * @return {HTMLElement}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    getContainer(): HTMLElement {\n        return this._container ??= this._create();\n    }\n\n    /**\n     * Инициализация контейнера списка свойств\n     *\n     * @return {HTMLElement}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _create(): HTMLElement {\n        const container = document.createElement('div');\n        container.append(this._createIBlockSelector().getContainer());\n\n        return container;\n    }\n\n    /**\n     * Выбран инфоблок\n     *\n     * @return {void}\n     * @param event {TagEvent}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _iBlockSelected(event: TagEvent): void {\n        this._property?.getContainer()?.remove();\n        this._createPropertySelector(event.data.tag.id);\n        this._container.append(this._property.getContainer());\n    }\n\n    /**\n     * Удален выбор инфоблока\n     *\n     * @return {void}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _iBlockRemove(event: TagEvent): void {\n        if (!event.target?.tags?.length) {\n            this._property?.getContainer()?.remove();\n        }\n    }\n\n    /**\n     * Создание селектора инфоблоков\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _createIBlockSelector(): EntitySelector {\n        return this._iBlock = new EntitySelector({\n            title: 'SHOLOKHOV_EXCHANGE_SETTINGS_UI_TITLE_RENDER_IBLOCK_SELECT_IBLOCK',\n            selector: {\n                multiple: false,\n                addButtonCaption: 'SHOLOHKOV_EXCHANGE_UI_ENTITY_SELECTOR_DIALOG_ADD_BUTTON_CAPTION_SELECT',\n                dialogOptions: {\n                    entities: [\n                        {\n                            id: 'sholokhov-exchange-iblock',\n                            dynamicSearch: true,\n                            dynamicLoad: true,\n                        }\n                    ]\n                },\n                events: {\n                    onAfterTagAdd: (event: TagEvent) => this._iBlockSelected(event),\n                    onAfterTagRemove: (event: TagEvent) => this._iBlockRemove(event),\n                }\n            }\n        });\n    }\n\n    /**\n     * Создание селектора свойств инфоблока\n     *\n     * @param iblockId {number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _createPropertySelector(iblockId: number = 0): EntitySelector {\n        return this._property = new EntitySelector({\n            title: 'SHOLOKHOV_EXCHANGE_UI_ENTITY_PROPERTY_SELECTOR',\n            selector: {\n                multiple: false,\n                addButtonCaption: 'SHOLOHKOV_EXCHANGE_UI_ENTITY_SELECTOR_DIALOG_ADD_BUTTON_CAPTION_SELECT',\n                dialogOptions: {\n                    entities: [\n                        {\n                            id: 'sholokhov-exchange-iblock-property',\n                            dynamicSearch: true,\n                            dynamicLoad: true,\n                            options: {\n                                iblockId: iblockId,\n                                nameTemplate: '#NAME# (#CODE#)',\n                                ...this._options?.property?.api || {}\n                            }\n                        }\n                    ]\n                }\n            }\n        });\n    }\n}","import {Item} from \"../../@types/render/Item.d.ts\";\nimport {EntitySelector} from \"./entitySelector.ts\";\nimport {TagEvent} from \"../../@types/render/entity-selector/events/tagSelector.d.ts\";\n\n/**\n * Селектор выбора пользовательских свойств определенного инфоблока\n *\n * @internal\n *\n * @since 1.2.0\n * @version 1.2.0\n */\nexport class UFProperty implements Item {\n    /**\n     * Контейнер списков\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _container: HTMLElement;\n\n    /**\n     * Список инфоблоков\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _iBlock: EntitySelector;\n\n    /**\n     * Список свойств\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _property: EntitySelector;\n\n    /**\n     * Получение контейнера списков\n     *\n     * @return {HTMLElement}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    getContainer(): HTMLElement {\n        return this._container ??= this._create();\n    }\n\n    /**\n     * Инициализация контейнера списка свойств\n     *\n     * @return {HTMLElement}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _create(): HTMLElement {\n        const container = document.createElement('div');\n        container.append(this._createIBlockSelector().getContainer());\n\n        return container;\n    }\n\n    /**\n     * Выбран инфоблок\n     *\n     * @return {void}\n     * @param event {TagEvent}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _iBlockSelected(event: TagEvent): void {\n        this._property?.getContainer()?.remove();\n        this._createPropertySelector(event.data.tag.id);\n        this._container.append(this._property.getContainer());\n    }\n\n    /**\n     * Удален выбор инфоблока\n     *\n     * @return {void}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _iBlockRemove(event: TagEvent): void {\n        if (!event.target?.tags?.length) {\n            this._property?.getContainer()?.remove();\n        }\n    }\n\n    /**\n     * Создание селектора инфоблоков\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _createIBlockSelector(): EntitySelector {\n        return this._iBlock = new EntitySelector({\n            title: 'SHOLOKHOV_EXCHANGE_SETTINGS_UI_TITLE_RENDER_IBLOCK_SELECT_IBLOCK',\n            selector: {\n                multiple: false,\n                addButtonCaption: 'SHOLOHKOV_EXCHANGE_UI_ENTITY_SELECTOR_DIALOG_ADD_BUTTON_CAPTION_SELECT',\n                dialogOptions: {\n                    entities: [\n                        {\n                            id: 'sholokhov-exchange-iblock',\n                            dynamicSearch: true,\n                            dynamicLoad: true,\n                        }\n                    ]\n                },\n                events: {\n                    onAfterTagAdd: (event: TagEvent) => this._iBlockSelected(event),\n                    onAfterTagRemove: (event: TagEvent) => this._iBlockRemove(event),\n                }\n            }\n        });\n    }\n\n    /**\n     * Создание селектора свойств инфоблока\n     *\n     * @param iblockId {number}\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    _createPropertySelector(iblockId: number): EntitySelector {\n        return this._property = new EntitySelector({\n            title: 'SHOLOKHOV_EXCHANGE_UI_ENTITY_PROPERTY_SELECTOR',\n            selector: {\n                multiple: false,\n                addButtonCaption: 'SHOLOHKOV_EXCHANGE_UI_ENTITY_SELECTOR_DIALOG_ADD_BUTTON_CAPTION_SELECT',\n                dialogOptions: {\n                    entities: [\n                        {\n                            id: 'sholokhov-exchange-user-field',\n                            dynamicSearch: true,\n                            dynamicLoad: true,\n                            options: {\n                                entityId: `IBLOCK_${iblockId}_SECTION`,\n                                nameTemplate: '#LIST_COLUMN_LABEL# (#FIELD_NAME#)',\n                                ...this._options?.property?.api || {}\n                            }\n                        }\n                    ]\n                }\n            }\n        });\n    }\n}","import {Input} from '../../render/input.ts';\nimport {Checkbox} from '../../render/checkbox.ts';\nimport {Select} from \"../../render/select.ts\";\nimport {EntitySelector} from \"../../render/entitySelector.ts\";\nimport {IBlockProperty} from \"../../render/iblockProperty.ts\";\nimport {UFProperty} from \"../../render/ufProperty.ts\";\n\nconst Type = {\n    Input: 'input',\n    Checkbox: 'checkbox',\n    Select: 'select',\n    EntitySelector: 'entity-selector',\n    IBlockProperty: 'iblock-property',\n    UfProperty: 'uf-property',\n};\n\nconst Map = {};\n\nMap[Type.Input] = Input;\nMap[Type.Checkbox] = Checkbox;\nMap[Type.Select] = Select;\nMap[Type.EntitySelector] = EntitySelector;\nMap[Type.IBlockProperty] = IBlockProperty;\nMap[Type.UfProperty] = UFProperty;\n\nexport {Type, Map};","import {Registry} from \"../container/index.ts\";\nimport {Map} from '../../config/render';\n\nexport class RenderRegistry {\n    static create(): Registry {\n        return new Registry(Map);\n    }\n}","import {Registry} from \"../container/index.ts\";\nimport {Item} from \"../../../@types/render/Item.d.ts\";\nimport {RenderRegistry} from \"../builder/RenderRegistry.ts\";\n\n/**\n * @since 1.2.0\n * @version 1.2.0\n */\nexport default class {\n    /**\n     * Хранилище сборщиков интерфейса\n     *\n     * @private\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    #registry: Registry;\n\n    /**\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    constructor() {\n        this.#registry = RenderRegistry.create();\n    }\n\n    /**\n     * Создание DOM элемента\n     *\n     * @param type\n     * @param options\n     *\n     * @since 1.2.0\n     * @version 1.2.0\n     */\n    create(type, options): Item|null {\n        const item = this.#registry.get(type);\n\n        if (!item) {\n            return null;\n        }\n\n        return new item(options);\n    }\n}","import RenderFactory from \"./util/factory/render.ts\";\nimport {Type as RenderType} from './config/render';\nimport {RenderRegistry} from \"./util/builder/RenderRegistry.ts\";\nimport 'ui.forms';\n\nconst Factory = new RenderFactory;\nconst Registry = RenderRegistry.create();\n\nexport {Factory, Registry, RenderType}\n"],"names":["Registry","data","babelHelpers","_classPrivateFieldInitSpec","writable","value","key","id","this","get","has","Object","keys","AbstractItem","options","_create","_title","_container","document","createElement","_createTitle","append","valueContainer","className","_createValue","title","innerText","BX","message","Input","_input","setAttribute","container","events","eventName","attributes","name","set","type","getAttributeNames","forEach","_this","getAttribute","Checkbox","query","field","api","_field$api","action","Promise","resolve","status","errors","parameters","method","_field$api2","reject","ajax","runAction","curl","then","response","Select","option","_select","add","index","remove","length","item","angle","Option","_options$api","callback","enums","Array","isArray","addOption","console","error","alert","_this2","EntitySelector","selector","_options$selector","addButtonCaption","_selector","TagSelector","renderTo","IBlockProperty","_options","_createIBlockSelector","getContainer","event","_property","_this$_property","_this$_property$getCo","_createPropertySelector","tag","target","_event$target","tags","_event$target$tags","_this$_property2","_this$_property2$getC","_iBlock","multiple","dialogOptions","entities","dynamicSearch","dynamicLoad","onAfterTagAdd","_iBlockSelected","onAfterTagRemove","_iBlockRemove","iblockId","nameTemplate","_this$_options","property","_this$_options$proper","UFProperty","entityId","Type","UfProperty","Map","RenderRegistry","Factory","create"],"mappings":"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"}